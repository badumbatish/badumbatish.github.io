1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-ad05a37061268ac6.js","880","static/chunks/app/posts/%5Bid%5D/page-0a046863f2056281.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
5:I[1168,["173","static/chunks/173-ad05a37061268ac6.js","565","static/chunks/565-d3001cb0b7ac580c.js","177","static/chunks/app/layout-23d97ae8d15fbd69.js"],"default"]
7:I[6213,[],"OutletBoundary"]
9:I[6213,[],"MetadataBoundary"]
b:I[6213,[],"ViewportBoundary"]
d:I[4835,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/c964a4de8175fdfc.css","style"]
:HL["/_next/static/css/7ad14cf05ba66ef7.css","style"]
0:{"P":null,"b":"qwCmd79stvC19ypyM00Ef","p":"","c":["","posts","what_after_kalei_location_debug"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","what_after_kalei_location_debug","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c964a4de8175fdfc.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":[["$","p",null,{"children":"I'm looking for new grad compiler work, please email at jjasmine@berkeley.edu"}],["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","what_after_kalei_location_debug","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7ad14cf05ba66ef7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","sgqSRFv1vUITURTOolS9z",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:T4a61,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#location-reporter-locator-and-reporter">Location, Reporter, Locator and Reporter</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#the-location-class">The Location class</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#the-reportee-class">The Reportee class</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#the-reporter-class">The Reporter class</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#the-locator-class">The Locator class</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#inferring-to-rows-and-columns">Inferring to rows and columns</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#tokens-and-the-lexer">Tokens (and the lexer)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#ast-nodes-and-the-parser">AST nodes (and the parser)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#study-case-scope-checking-visitor">Study case: scope checking visitor</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#ending-words">Ending words</a></li></ol></nav><h2 id="prologue"><a aria-hidden="true" tabindex="-1" href="#prologue"><span class="icon icon-link"></span></a>Prologue</h2>
<p>Hi everyone, wow, it's been a quick minute since I posted a new article. How's everyone doing :) I'm still trucking
away at life applying to compiler jobs as well as schooling at Berk. Hope everybody's doing great :)</p>
<p>The
article is for
people
who might be
asking:</p>
<p>"Ok, I've done the <a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html" rel="nofollow" target="_blank">llvm tutorial</a> already.
What's next?"</p>
<p>More specifically, the article is about adding primitive support for error reporting to the
toy compiler.</p>
<p>Besides that, the article is also to share my software design decisions regarding my compiler's diagnostics.</p>
<p>As is tradition :) I also wanna share some songs with you. The two songs are <a href="">Valentine</a> and <a href="">Into my arms</a>,
both by COIN, one of my fav band. todo explain more about this.</p>
<p>I hope you enjoy :) (both the songs and the blog hahah)</p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h2>
<p>Compiler diagnostics is an important aspect in one's compiler. From erroring out on the programmer's mistake to
providing warnings or giving diagnostics, the ability to accurately locate the location of the pesky problems to said
programmer is proven to be extremely valuable: only providing to the programmer the row and column number of where an error occurs is less helpful and more confusing than a compiler pointing, tracing and explaining an error to a programmer.</p>
<p>The article then discusses a way to improve upon the llvm Kaleidoscope toy compiler in the diagnostic aspect for the
user. The result below shows the difference between a primitive and a somewhat sophisticated
error
diagnostics scheme and is are
implemented as
part of
the sammine
compiler.</p>
<p><img src="/blogs/what_after_kalei_location_debug/comparison.png" alt="comparison between"></p>
<h2 id="location-reporter-locator-and-reporter"><a aria-hidden="true" tabindex="-1" href="#location-reporter-locator-and-reporter"><span class="icon icon-link"></span></a>Location, Reporter, Locator and Reporter</h2>
<p>Let's start with a simple description of the problem and a simple answer to the said problem.</p>
<blockquote>
<p>Given a string (which is the input of the compiler), and a starting point index and an ending point index of said
string, indicating the component (either a token or a subpart of some AST) that is faulty.</p>
</blockquote>
<p>Below shows a string of a <span class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#C6D0F5">let expression</span></span></code></span> and its corresponding starting and ending point in the input string.</p>
<pre><code>start of let expr
|       end of let expr
|       |
↓       ↓
01234556789
let x = 1;\eof
</code></pre>
<p>Here, the starting point for the let expr has index 0 in
the string, and the ending point for the let expr has index 7 in the string (the semicolon at 8 is not counted).</p>
<p>From first principles, how can a compiler consolidate the location of these tokens: <code>let</code>, <code>x</code>, <code>=</code>, <code>1</code>
together and understand that the <code>let expression</code> spans from 0 to 7?</p>
<p>Let us define the class <code>Location</code>, <code>Reportee</code>
and <code>Reporter</code> currently implemented as part of the compiler and see how all of these building blocks fit in together.</p>
<h4 id="the-location-class"><a aria-hidden="true" tabindex="-1" href="#the-location-class"><span class="icon icon-link"></span></a>The Location class</h4>
<p>The <code>Location</code> class is basically two indices, indicating the location of a construct in the
input string. The first index
<code>source_start</code>
signifies the
starting location of a component and vice versa for <code>source_end</code>. If a construct in the compiler (a token or an AST)
only occupies a single space, then <code>source_start == source_end</code>.</p>
<p>When two <code>Location</code>s come together to form one singular <code>Location</code>, we take the minimum of all
<code>source_start</code> and the maximum of all the <code>source_end</code>. This is implemented as the pipe operator <code>|</code> for the class:</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#737994;font-style:italic">// Combine two locations</span></span>
<span class="line"><span style="color:#E5C890;font-style:italic">Location</span><span style="color:#CA9EE6"> operator</span><span style="color:#C6D0F5">|</span><span style="color:#949CBB">(</span><span style="color:#CA9EE6">const</span><span style="color:#E5C890;font-style:italic"> Location</span><span style="color:#81C8BE"> &#x26;</span><span style="color:#EA999C;font-style:italic">other</span><span style="color:#949CBB">)</span><span style="color:#CA9EE6"> const</span><span style="color:#949CBB"> {</span></span>
<span class="line"><span style="color:#C6D0F5">    Location result</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#C6D0F5">    result</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_start </span><span style="color:#81C8BE">=</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#8CAAEE;font-style:italic">min</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">source_start</span><span style="color:#949CBB">,</span><span style="color:#C6D0F5"> other</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_start</span><span style="color:#949CBB">);</span></span>
<span class="line"><span style="color:#C6D0F5">    result</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_end </span><span style="color:#81C8BE">=</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#8CAAEE;font-style:italic">max</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">source_end</span><span style="color:#949CBB">,</span><span style="color:#C6D0F5"> other</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_end</span><span style="color:#949CBB">);</span></span>
<span class="line"><span style="color:#CA9EE6">    return</span><span style="color:#C6D0F5"> result</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#949CBB">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CA9EE6">void</span><span style="color:#CA9EE6"> operator</span><span style="color:#C6D0F5">|=</span><span style="color:#949CBB">(</span><span style="color:#CA9EE6">const</span><span style="color:#E5C890;font-style:italic"> Location</span><span style="color:#81C8BE"> &#x26;</span><span style="color:#EA999C;font-style:italic">other</span><span style="color:#949CBB">)</span><span style="color:#949CBB"> {</span></span>
<span class="line"><span style="color:#C6D0F5">    source_start </span><span style="color:#81C8BE">=</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#8CAAEE;font-style:italic">min</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">source_start</span><span style="color:#949CBB">,</span><span style="color:#C6D0F5"> other</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_start</span><span style="color:#949CBB">);</span></span>
<span class="line"><span style="color:#C6D0F5">    source_end </span><span style="color:#81C8BE">=</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#8CAAEE;font-style:italic">max</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">source_end</span><span style="color:#949CBB">,</span><span style="color:#C6D0F5"> other</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">source_end</span><span style="color:#949CBB">);</span></span>
<span class="line"><span style="color:#949CBB">}</span></span></code></pre>
<p>Let's look at an example, given the string of a binary expression <code>x+y</code>, since <code>x</code> takes the <code>Location(0,0)</code>, <code>y</code>
takes the <code>Location(2,2)</code>. The location for the resulting binary expression is <code>Location(min(0,2), max(0,2)) = Location(0, 2)</code>.</p>
<h4 id="the-reportee-class"><a aria-hidden="true" tabindex="-1" href="#the-reportee-class"><span class="icon icon-link"></span></a>The Reportee class</h4>
<p>Given a location, we need a message to be associated with it, together with the diagnostic kind: Is this message an
error? Is it a warning? Is this just to provide the programmer/compiler writer with some extra information for an
informed decision?</p>
<p>The class that takes care of this is the <code>Reportee</code> class. It defines different <span class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#C6D0F5">ReportKind</span></span></code></span> such as <code>error</code>,
<code>warn</code> or <code>diag</code> for error, warning or diagnostics respectively. It also provides abstraction such as <code>add_error()</code>,
<code>add_warn()</code> or <code>add_diag</code> for said <code>ReportKind</code>s.</p>
<p>Who's calling <code>add_error()</code> and <code>add_warn()</code>? Whichever phase the compiler needs to communicate with the programmer
about, that phase will inherit from this <code>Reportee</code> class and use these utilities functions. The sections on Lexer and
Parser will go over these finer details.</p>
<p>Besides this, the <code>Reportee</code> class also carries <code>size_t</code> of <code>error_count</code>, <code>warn_count</code> and
<code>diag_count</code> to be used as statistics for the <code>Reporter</code> class, which is the topic of our next subsection.</p>
<h4 id="the-reporter-class"><a aria-hidden="true" tabindex="-1" href="#the-reporter-class"><span class="icon icon-link"></span></a>The Reporter class</h4>
<p>You must be wondering, just the <code>source_start, source_end</code> is not enough, this result is just the bare minimum.
Somehow the compiler needs to be able to map a location of <code> (source_start, source_end)</code> to the starting and ending rows and columns for easier visualization. The compiler also
needs to 'report' messages coming from different stages such as lexing, parsing or type checking. Keeping these
details in mind, let's look at the <code>Reporter</code> class, who's in charge of these functionalities.</p>
<p>The <code>Reporter</code> class is in charge of inputting</p>
<h4 id="the-locator-class"><a aria-hidden="true" tabindex="-1" href="#the-locator-class"><span class="icon icon-link"></span></a>The Locator class</h4>
<h3 id="inferring-to-rows-and-columns"><a aria-hidden="true" tabindex="-1" href="#inferring-to-rows-and-columns"><span class="icon icon-link"></span></a>Inferring to rows and columns</h3>
<h2 id="tokens-and-the-lexer"><a aria-hidden="true" tabindex="-1" href="#tokens-and-the-lexer"><span class="icon icon-link"></span></a>Tokens (and the lexer)</h2>
<p>Let's start with the tokens and the lexer. When given the source code as a string (maybe via a file), the lexer
scans from left to right on that string, each time updating the index on that input string and returning a token.
This is the basis of our class Location.</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">class</span><span style="color:#E5C890;font-style:italic"> Location</span><span style="color:#949CBB"> {</span></span>
<span class="line"><span style="color:#CA9EE6">    size_t</span><span style="color:#C6D0F5"> internal_index </span><span style="color:#81C8BE">=</span><span style="color:#EF9F76"> 0</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#737994;font-style:italic">    // todo, Jasmine please doooo thissss</span></span>
<span class="line"><span style="color:#737994;font-style:italic">    // override ++ operator</span></span>
<span class="line"><span style="color:#737994;font-style:italic">    // override -- operator</span></span>
<span class="line"><span style="color:#737994;font-style:italic">    // override == operator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#737994;font-style:italic">    // override | (to combine multiple Location)</span></span>
<span class="line"><span style="color:#737994;font-style:italic">    // int overload</span></span>
<span class="line"><span style="color:#949CBB">};</span></span></code></pre>
<p>Suppose our tokens are modeled as:</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">class</span><span style="color:#E5C890;font-style:italic"> Token</span><span style="color:#949CBB"> {</span></span>
<span class="line"><span style="color:#CA9EE6">public</span><span style="color:#949CBB">:</span></span>
<span class="line"><span style="color:#C6D0F5">  TokenType type</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#E5C890">  std</span><span style="color:#949CBB">::</span><span style="color:#C6D0F5">string lexeme</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#C6D0F5">  Location location</span><span style="color:#949CBB">;</span></span>
<span class="line"><span style="color:#8CAAEE;font-style:italic">  Token</span><span style="color:#949CBB">(</span><span style="color:#E5C890;font-style:italic">TokenType</span><span style="color:#EA999C;font-style:italic"> type</span><span style="color:#949CBB">,</span><span style="color:#E5C890"> std</span><span style="color:#949CBB">::</span><span style="color:#E5C890;font-style:italic">string</span><span style="color:#EA999C;font-style:italic"> lexeme</span><span style="color:#949CBB">,</span><span style="color:#E5C890;font-style:italic"> Location</span><span style="color:#EA999C;font-style:italic"> location</span><span style="color:#949CBB">)</span></span>
<span class="line"><span style="color:#949CBB">      :</span><span style="color:#8CAAEE;font-style:italic"> type</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">type</span><span style="color:#949CBB">),</span><span style="color:#8CAAEE;font-style:italic"> lexeme</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">std</span><span style="color:#949CBB">::</span><span style="color:#8CAAEE;font-style:italic">move</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">lexeme</span><span style="color:#949CBB">)),</span><span style="color:#8CAAEE;font-style:italic"> location</span><span style="color:#949CBB">(</span><span style="color:#C6D0F5">location</span><span style="color:#949CBB">)</span><span style="color:#949CBB"> {}</span></span>
<span class="line"><span style="color:#949CBB">};</span></span></code></pre>
<h2 id="ast-nodes-and-the-parser"><a aria-hidden="true" tabindex="-1" href="#ast-nodes-and-the-parser"><span class="icon icon-link"></span></a>AST nodes (and the parser)</h2>
<p>After we've produced our tokens, the parser takes in the stream of tokens and produces our AST. One of the question
is: "If something went wrong, how do we notify programmers?"</p>
<p>The simple thing to do is to combine all the AST's token's location into the AST's location. Below shows a pseudo
code for that</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#C6D0F5">curr_tok_location </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> first token location of AST</span></span>
<span class="line"><span style="color:#C6D0F5">For all tokens T that made up the AST:</span></span>
<span class="line"><span style="color:#C6D0F5">    curr_tok_location </span><span style="color:#81C8BE">|=</span><span style="color:#C6D0F5"> T</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">location</span></span>
<span class="line"><span style="color:#C6D0F5">AST</span><span style="color:#949CBB">.</span><span style="color:#C6D0F5">Location </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> curr_tok_location</span></span></code></pre>
<h2 id="study-case-scope-checking-visitor"><a aria-hidden="true" tabindex="-1" href="#study-case-scope-checking-visitor"><span class="icon icon-link"></span></a>Study case: scope checking visitor</h2>
<h2 id="ending-words"><a aria-hidden="true" tabindex="-1" href="#ending-words"><span class="icon icon-link"></span></a>Ending words</h2>
<p>Implemented diagnostics for my compiler was really fun. I knew being able to abstract and reuse code is a really
important aspect in software engineering but it is especially essential in compiler. Different stages in a compiler
means that unless I reuse code, repetitive concepts will keep popping up again (hence the Reportee class).</p>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[ONGOING] What after Kaleidoscope: Error location"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"8888-08-08"}]}],["$","div",null,{"className":"flex font-bold","children":"Edit:"}],"My resume is ",["$","a",null,{"href":"https://www.overleaf.com/project/638120c30d0003f7bfe10360","children":"here"}]," (and downloadable ",["$","a",null,{"href":"https://badumbatish.github.io/about_me/Jasmine_Resume_Badumbatish.pdf","children":"here"}],"). If you know of a compiler related job posting, please feel free to contact me or refer me at either ",["$","a",null,{"href":"tanghocle456@gmail.com","children":"tanghocle456@gmail.com"}]," or ",["$","a",null,{"href":"jjasmine@berkeley.edu","children":"jjasmine@berkeley.edu"}],".",["$","hr",null,{}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}]]}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[ONGOING] What after Kaleidoscope: Error location"}],["$","meta","2",{"name":"description","content":"Built with NextJS, TailwindCSS, and a tonnn of loveee :)"}],["$","link","3",{"rel":"icon","href":"/_next/static/media/pfp5.0daa0f7d.jpeg"}]]
8:null
