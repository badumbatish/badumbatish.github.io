1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","880","static/chunks/app/posts/%5Bid%5D/page-8778b7e42f8ceed2.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[7921,["874","static/chunks/874-437a265a67d6cfee.js","177","static/chunks/app/layout-6c77c7f0e287af25.js"],"default"]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/f55f51dd62de488d.css","style"]
:HL["/_next/static/css/8a287c41de7a8698.css","style"]
0:{"P":null,"b":"RfrKFjiYxQqaMEUvHgf92","p":"","c":["","posts","mlir_transform_note"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","mlir_transform_note","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f55f51dd62de488d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","mlir_transform_note","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8a287c41de7a8698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
12:I[8175,[],"IconMark"]
11:T186a8,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#resources">Resources</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#payload-and-transform">Payload and transform</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#structured-linalg-ops">Structured linalg ops</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#linalggeneric">linalg.generic</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#alright-what-about-tiling-and-looping-actually">Alright what about tiling and looping actually?</a></li></ol></nav><h1 id="resources"><a aria-hidden="true" tabindex="-1" href="#resources"><span class="icon icon-link"></span></a>Resources</h1>
<ul>
<li><a href="https://mlir.llvm.org/docs/Tutorials/transform/" rel="nofollow" target="_blank">https://mlir.llvm.org/docs/Tutorials/transform/</a></li>
<li><a href="https://mlir.llvm.org/docs/Dialects/Linalg/" rel="nofollow" target="_blank">https://mlir.llvm.org/docs/Dialects/Linalg/</a></li>
</ul>
<h1 id="payload-and-transform"><a aria-hidden="true" tabindex="-1" href="#payload-and-transform"><span class="icon icon-link"></span></a>Payload and transform</h1>
<p>In the Transform dialect there's two kind of IR:</p>
<ul>
<li>If an IR is operating on others, transforming them, that is called a Transform IR.</li>
<li>If an IR is being operated on, its called a payload IR.</li>
</ul>
<h1 id="structured-linalg-ops"><a aria-hidden="true" tabindex="-1" href="#structured-linalg-ops"><span class="icon icon-link"></span></a>Structured linalg ops</h1>
<p><span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>indexing maps</span></span><button type="button" title="Copy code" aria-label="Copy code" data="indexing maps" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>affine_map</span></span><button type="button" title="Copy code" aria-label="Copy code" data="affine_map" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>: a lot of the time, MLIR ops accept something called <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>affine_map</span></span><button type="button" title="Copy code" aria-label="Copy code" data="affine_map" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, which
is a linear mapping of indexes that an array, a vector or a tensor can iterate on.</p>
<p>iterator_types: now, when you're iterating over these array or vector, you'll need to tell the indexer, for each dimension,
if you're "parallel"-ing (keeping its dimension) or "reduction" (reducing the dimension)</p>
<p>For example, the following code's <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>result</span></span><button type="button" title="Copy code" aria-label="Copy code" data="result" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> use <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>vector.contract</span></span><button type="button" title="Copy code" aria-label="Copy code" data="vector.contract" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> op. The operation takes in
two attributes: indexing_maps and iterator_types. There are three affine_map setting in
<span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>indexing_maps</span></span><button type="button" title="Copy code" aria-label="Copy code" data="indexing_maps" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, as we have 2 inputs and 1 output (making it 3). The singular <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>i</span></span><button type="button" title="Copy code" aria-label="Copy code" data="i" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> is because we only have 1 dimension.
The former <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>i</span></span><button type="button" title="Copy code" aria-label="Copy code" data="i" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> stands for the available index variable to use, and the latter <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>i</span></span><button type="button" title="Copy code" aria-label="Copy code" data="i" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> (if present) stands for the index that the array,
tensor or vector would use.
Since we're producing an integer, the third affine_map goes from <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>(i)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="(i)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>()</span></span><button type="button" title="Copy code" aria-label="Copy code" data="()" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, thus the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>reduction</span></span><button type="button" title="Copy code" aria-label="Copy code" data="reduction" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> type of iterator_types</p>
<p>Note that since we have 8 elements in first input, and 8 elements in second input (same dimension), we can use the same (i).</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="mlir" data-theme="github-dark-dimmed"><code data-language="mlir" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">%init  = </span><span style="color:#6CB6FF">arith.constant 0.0</span><span style="color:#ADBAC7"> : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#768390">// Neutral element of multiplication.</span></span>
<span data-line=""><span style="color:#ADBAC7">%ones = </span><span style="color:#6CB6FF">arith.constant</span><span style="color:#6CB6FF"> dense</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">1.0</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> : </span><span style="color:#F69D50">vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""><span style="color:#768390">// Actual contraction.</span></span>
<span data-line=""><span style="color:#ADBAC7">%result = </span><span style="color:#6CB6FF">vector.contract</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#6CB6FF">  indexing_maps</span><span style="color:#ADBAC7"> = </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">  iterator_types</span><span style="color:#ADBAC7"> = </span><span style="color:#6bc46d">[</span><span style="color:#96D0FF">"reduction"</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span><span style="color:#ADBAC7"> %0, %ones, %init : </span><span style="color:#F69D50">vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">into</span><span style="color:#F69D50"> f32</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%init  = arith.constant 0.0 : f32
// Neutral element of multiplication.
%ones = arith.constant dense<1.0> : vector<8xf32>
// Actual contraction.
%result = vector.contract {
  indexing_maps = [affine_map<(i) -> (i)>,
                   affine_map<(i) -> (i)>,
                   affine_map<(i) -> ()>],
  iterator_types = [&#x22;reduction&#x22;]
} %0, %ones, %init : vector<8xf32>, vector<8xf32> into f32" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>The pseudo code for the loop is</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark-dimmed"><code data-language="python" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">for</span><span style="color:#ADBAC7"> i </span><span style="color:#F47067">in</span><span style="color:#6CB6FF"> range</span><span style="color:#6cb6ff">(</span><span style="color:#6CB6FF">8</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">  init </span><span style="color:#F47067">+=</span><span style="color:#ADBAC7"> p0</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">i</span><span style="color:#6cb6ff">]</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">*</span><span style="color:#ADBAC7"> ones</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">i</span><span style="color:#6cb6ff">]</span></span><button type="button" title="Copy code" aria-label="Copy code" data="for i in range(8):
  init += p0[i] * ones[i]" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Alright, seems like you quite got that? Let's do another round:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="mlir" data-theme="github-dark-dimmed"><code data-language="mlir" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">%result = </span><span style="color:#6CB6FF">vector.contract</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#6CB6FF">  indexing_maps</span><span style="color:#ADBAC7"> = </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">k</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">  iterator_types</span><span style="color:#ADBAC7"> = </span><span style="color:#6bc46d">[</span><span style="color:#96D0FF">"parallel"</span><span style="color:#ADBAC7">, </span><span style="color:#96D0FF">"parallel"</span><span style="color:#ADBAC7">, </span><span style="color:#96D0FF">"reduction"</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span><span style="color:#ADBAC7"> %lhs, %rhs, %init: </span><span style="color:#F69D50">vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">into</span><span style="color:#F69D50"> vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span><button type="button" title="Copy code" aria-label="Copy code" data="%result = vector.contract {
  indexing_maps = [affine_map<(i, j, k) -> (i, k)>,
                   affine_map<(i, j, k) -> (k, j)>,
                   affine_map<(i, j, k) -> (i, j)>],
  iterator_types = [&#x22;parallel&#x22;, &#x22;parallel&#x22;, &#x22;reduction&#x22;]
} %lhs, %rhs, %init: vector<8x10xf32>, vector<10x16xf32> into vector<8x16xf32>" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Here you take 2 input and get out 1 output, so there are 3 affine_maps. Each vector have 3 dimension, so <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>(i, j, k)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="(i, j, k)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.
The first vector uses i and k to index its two dimension. The second vector uses k and j to index its two dimension, and the
output vector uses the i and j index. we have 8, 10, 16,so we need to do (i, j, k) instead of just <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>i, j</span></span><button type="button" title="Copy code" aria-label="Copy code" data="i, j" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</p>
<p>Here's the pseudo code in for-loops</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="python" data-theme="github-dark-dimmed"><code data-language="python" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">for</span><span style="color:#ADBAC7"> i </span><span style="color:#F47067">in</span><span style="color:#6CB6FF"> range</span><span style="color:#6cb6ff">(</span><span style="color:#6CB6FF">8</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#F47067">  for</span><span style="color:#ADBAC7"> j </span><span style="color:#F47067">in</span><span style="color:#6CB6FF"> range</span><span style="color:#6cb6ff">(</span><span style="color:#6CB6FF">16</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#F47067">    for</span><span style="color:#ADBAC7"> k </span><span style="color:#F47067">in</span><span style="color:#6CB6FF"> range</span><span style="color:#6cb6ff">(</span><span style="color:#6CB6FF">10</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">      init</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">i, j</span><span style="color:#6cb6ff">]</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">+=</span><span style="color:#ADBAC7"> lhs</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">i, k</span><span style="color:#6cb6ff">]</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">*</span><span style="color:#ADBAC7"> rhs</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">k, j</span><span style="color:#6cb6ff">]</span></span><button type="button" title="Copy code" aria-label="Copy code" data="for i in range(8):
  for j in range(16):
    for k in range(10):
      init[i, j] += lhs[i, k] * rhs[k, j]" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h1 id="linalggeneric"><a aria-hidden="true" tabindex="-1" href="#linalggeneric"><span class="icon icon-link"></span></a>linalg.generic</h1>
<p>linalg.generic can be used to implement other operation. Let's do this</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="mlir" data-theme="github-dark-dimmed"><code data-language="mlir" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#6CB6FF">linalg.generic</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#6CB6FF">  indexing_maps</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">  iterator_types</span><span style="color:#ADBAC7"> = </span><span style="color:#6bc46d">[</span><span style="color:#96D0FF">"parallel"</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">ins</span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">%in : </span><span style="color:#F69D50">memref</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ADBAC7">?x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">outs</span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">%out : </span><span style="color:#F69D50">memref</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ADBAC7">?x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">^bb0</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">%in_one : </span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">, %out_one : </span><span style="color:#F69D50">f32</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">  %c0 = </span><span style="color:#6CB6FF">arith.constant 0.0</span><span style="color:#ADBAC7"> : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#ADBAC7">  %0 = </span><span style="color:#6CB6FF">arith.cmpf</span><span style="color:#F47067"> ogt</span><span style="color:#ADBAC7"> %in_one, %c0 : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#ADBAC7">  %1 = </span><span style="color:#6CB6FF">arith.select</span><span style="color:#ADBAC7"> %0, %in_one, %c0 : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#6CB6FF">  linalg.yield</span><span style="color:#ADBAC7"> %1 : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="linalg.generic {
  indexing_maps [affine_map<(i) -> (i)>, affine_map<(i) -> (i)>],
  iterator_types = [&#x22;parallel&#x22;]
} ins(%in : memref<?xf32>) outs(%out : memref<?xf32>) {
^bb0(%in_one : f32, %out_one : f32):
  %c0 = arith.constant 0.0 : f32
  %0 = arith.cmpf ogt %in_one, %c0 : f32
  %1 = arith.select %0, %in_one, %c0 : f32
  linalg.yield %1 : f32
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>The prior code shows you how to use <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>linalg.generic</span></span><button type="button" title="Copy code" aria-label="Copy code" data="linalg.generic" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> to implement a ReLu filter.
The basic block <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>bb0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="bb0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> (marked with a ^ in the front) implements the ReLu kernel on a per-index basis,
and the way we index these things are specified by the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>indexing_maps</span></span><button type="button" title="Copy code" aria-label="Copy code" data="indexing_maps" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> attribute.
Inside this basic block, you can use other scalar operations to implement the kernel:</p>
<ul>
<li>Initialize 0 as a constant to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>c0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="c0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</li>
<li>Compare the input scalar to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>c0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="c0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, and put the result to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>%0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</li>
<li>Select either the input scalar or <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>c0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="c0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, depending on the comparison result <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>%0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, assigning it to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>%1</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%1" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></li>
<li>Return the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>%1</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%1" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</li>
</ul>
<p>Seems easy enough? hahhahahaha</p>
<h1 id="alright-what-about-tiling-and-looping-actually"><a aria-hidden="true" tabindex="-1" href="#alright-what-about-tiling-and-looping-actually"><span class="icon icon-link"></span></a>Alright what about tiling and looping actually?</h1>
<p>Let's talk about tiling first. I first learned about tiling through the PMPP book's example on matrix multiplcation. The transform tutorial couldn't have put it any better:</p>
<blockquote>
<p>Tiling, in general, can be seen as partitioning the iteration space into smaller parts, or tiles, so that the data required by each part fits into a level of cache for example. The order in which tiles are executed must preserve the original data dependencies.</p>
</blockquote>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="mlir" data-theme="github-dark-dimmed"><code data-language="mlir" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">%0 = </span><span style="color:#6CB6FF">scf.forall</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">%i, %j</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">in</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#6CB6FF">4</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">2</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6CB6FF">     shared_outs</span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">%shared = %init</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">  // Scale the loop induction variables by the tile sizes.</span></span>
<span data-line=""><span style="color:#ADBAC7">  %3 = </span><span style="color:#6CB6FF">affine.apply</span><span style="color:#6CB6FF"> affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6bc46d">(</span><span style="color:#F69D50">d0</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F69D50">d0</span><span style="color:#ADBAC7"> * </span><span style="color:#6CB6FF">2</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">%i</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">  %4 = </span><span style="color:#6CB6FF">affine.apply</span><span style="color:#6CB6FF"> affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6bc46d">(</span><span style="color:#F69D50">d0</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F69D50">d0</span><span style="color:#ADBAC7"> * </span><span style="color:#6CB6FF">8</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">%j</span><span style="color:#6bc46d">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">  // Take slices of inputs and outputs. Only the "i" and "j" dimensions are sliced.</span></span>
<span data-line=""><span style="color:#ADBAC7">  %lhs_slice = </span><span style="color:#6CB6FF">tensor.extract_slice</span><span style="color:#ADBAC7"> %lhs</span><span style="color:#6bc46d">[</span><span style="color:#ADBAC7">%</span><span style="color:#6CB6FF">3</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">0</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">10</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">1</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">1</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#ADBAC7">             : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">to</span><span style="color:#F69D50"> tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""><span style="color:#ADBAC7">  %rhs_slice = </span><span style="color:#6CB6FF">tensor.extract_slice</span><span style="color:#ADBAC7"> %rhs</span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">0</span><span style="color:#ADBAC7">, %4</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">8</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">1</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">1</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#ADBAC7">             : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">to</span><span style="color:#F69D50"> tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""><span style="color:#ADBAC7">  %result_slice = </span><span style="color:#6CB6FF">tensor.extract_slice</span><span style="color:#ADBAC7"> %shared</span><span style="color:#6bc46d">[</span><span style="color:#ADBAC7">%</span><span style="color:#6CB6FF">3</span><span style="color:#ADBAC7">, %</span><span style="color:#6CB6FF">4</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">8</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">[</span><span style="color:#6CB6FF">1</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">1</span><span style="color:#6bc46d">]</span></span>
<span data-line=""><span style="color:#ADBAC7">                : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">to</span><span style="color:#F69D50"> tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">  // This is exactly the same operation as before, but now operating on smaller</span></span>
<span data-line=""><span style="color:#768390">  // slices of data.</span></span>
<span data-line=""><span style="color:#ADBAC7">  %partial =  </span><span style="color:#6CB6FF">linalg.generic</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#6CB6FF">  indexing_maps</span><span style="color:#ADBAC7"> = </span><span style="color:#daaa3f">[</span><span style="color:#6CB6FF">affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ff938a">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ff938a">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#F69D50">k</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">                   affine_map</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ff938a">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">k</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#F69D50">i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">j</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">></span><span style="color:#daaa3f">]</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#6CB6FF">  iterator_types</span><span style="color:#ADBAC7"> = </span><span style="color:#daaa3f">[</span><span style="color:#96D0FF">"parallel"</span><span style="color:#ADBAC7">, </span><span style="color:#96D0FF">"parallel"</span><span style="color:#ADBAC7">, </span><span style="color:#96D0FF">"reduction"</span><span style="color:#daaa3f">]</span></span>
<span data-line=""><span style="color:#ADBAC7">  </span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">ins</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">%lhs_slice, %rhs_slice : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">10</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#6CB6FF">    outs</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">%result_slice : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> -</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#F47067">  ^bb0</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">%lhs_one: </span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">, %rhs_one: </span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">, %init_one: </span><span style="color:#F69D50">f32</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">    %0 = </span><span style="color:#6CB6FF">arith.mulf</span><span style="color:#ADBAC7"> %lhs_one, %rhs_one : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#ADBAC7">    %1 = </span><span style="color:#6CB6FF">arith.addf</span><span style="color:#ADBAC7"> %init_one, %0 : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#6CB6FF">    linalg.yield</span><span style="color:#ADBAC7"> %1 : </span><span style="color:#F69D50">f32</span></span>
<span data-line=""><span style="color:#ADBAC7">  </span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7"> : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">  // Terminator for the loop with tensor-insertion semantics. Inserts a slice</span></span>
<span data-line=""><span style="color:#768390">  // into a larger tensor, potentially in parallel.</span></span>
<span data-line=""><span style="color:#6CB6FF">  scf.forall.in_parallel</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#6CB6FF">    tensor.parallel_insert_slice</span><span style="color:#ADBAC7"> %partial </span><span style="color:#F47067">into</span><span style="color:#ADBAC7"> %shared</span><span style="color:#daaa3f">[</span><span style="color:#ADBAC7">%</span><span style="color:#6CB6FF">3</span><span style="color:#ADBAC7">, %</span><span style="color:#6CB6FF">4</span><span style="color:#daaa3f">]</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">[</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">8</span><span style="color:#daaa3f">]</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">[</span><span style="color:#6CB6FF">1</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">1</span><span style="color:#daaa3f">]</span></span>
<span data-line=""><span style="color:#ADBAC7">        : </span><span style="color:#F69D50">tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">2</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">into</span><span style="color:#F69D50"> tensor</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#6CB6FF">8</span><span style="color:#ADBAC7">x</span><span style="color:#6CB6FF">16</span><span style="color:#ADBAC7">x</span><span style="color:#F69D50">f32</span><span style="color:#ADBAC7">></span></span>
<span data-line=""><span style="color:#ADBAC7">  </span><span style="color:#6bc46d">}</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="%0 = scf.forall (%i, %j) in (4, 2)
     shared_outs(%shared = %init) -> (tensor<8x16xf32>) {

  // Scale the loop induction variables by the tile sizes.
  %3 = affine.apply affine_map<(d0) -> (d0 * 2)>(%i)
  %4 = affine.apply affine_map<(d0) -> (d0 * 8)>(%j)

  // Take slices of inputs and outputs. Only the &#x22;i&#x22; and &#x22;j&#x22; dimensions are sliced.
  %lhs_slice = tensor.extract_slice %lhs[%3, 0] [2, 10] [1, 1]
             : tensor<8x10xf32> to tensor<2x10xf32>
  %rhs_slice = tensor.extract_slice %rhs[0, %4] [10, 8] [1, 1]
             : tensor<10x16xf32> to tensor<10x8xf32>
  %result_slice = tensor.extract_slice %shared[%3, %4] [2, 8] [1, 1]
                : tensor<8x16xf32> to tensor<2x8xf32>

  // This is exactly the same operation as before, but now operating on smaller
  // slices of data.
  %partial =  linalg.generic {
  indexing_maps = [affine_map<(i, j, k) -> (i, k)>,
                   affine_map<(i, j, k) -> (k, j)>,
                   affine_map<(i, j, k) -> (i, j)>],
  iterator_types = [&#x22;parallel&#x22;, &#x22;parallel&#x22;, &#x22;reduction&#x22;]
  } ins(%lhs_slice, %rhs_slice : tensor<2x10xf32>, tensor<10x8xf32>)
    outs(%result_slice : tensor<2x8xf32>) -> tensor<2x8xf32> {
  ^bb0(%lhs_one: f32, %rhs_one: f32, %init_one: f32):
    %0 = arith.mulf %lhs_one, %rhs_one : f32
    %1 = arith.addf %init_one, %0 : f32
    linalg.yield %1 : f32
  } : tensor<2x8xf32>

  // Terminator for the loop with tensor-insertion semantics. Inserts a slice
  // into a larger tensor, potentially in parallel.
  scf.forall.in_parallel {
    tensor.parallel_insert_slice %partial into %shared[%3, %4] [2, 8] [1, 1]
        : tensor<2x8xf32> into tensor<8x16xf32>
  }
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>scf.forall evaluates a block multiple time in parallel.</p>
<p>A tile in the transform IR is a slice of the original data:</p>
<blockquote>
<p>In the case of linalg.generic operations, the iteration space is implicit and is defined by the shape of the operands. Therefore, a tile can be expressed by performing the same operation on a subset (slice) of the original data</p>
</blockquote>
<p>Arghhhh i hate this i don't get thissssss arghhhhhhhhhhh what the hell is going onnnnnnnnnnn.</p>
<p>gonna go watch netflix and ice cream and takoyaki</p>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[ONGOING] tMLIR Transform note"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"2025-07-27"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}]]}]
a:{"metadata":[["$","title","0",{"children":"[ONGOING] tMLIR Transform note"}],["$","meta","1",{"name":"description","content":"Jasmine MLIR transform note"}],["$","link","2",{"rel":"icon","href":"/_next/static/media/pfp6.723cdd8c.png"}],["$","$L12","3",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
