1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","880","static/chunks/app/posts/%5Bid%5D/page-8778b7e42f8ceed2.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[7921,["874","static/chunks/874-437a265a67d6cfee.js","177","static/chunks/app/layout-6c77c7f0e287af25.js"],"default"]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/f55f51dd62de488d.css","style"]
:HL["/_next/static/css/8a287c41de7a8698.css","style"]
0:{"P":null,"b":"MMU4gQux1CEnrUm_1kJLp","p":"","c":["","posts","codegen_extend_kalei"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","codegen_extend_kalei","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f55f51dd62de488d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","codegen_extend_kalei","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8a287c41de7a8698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
12:I[8175,[],"IconMark"]
11:T50a2,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#on-the-side-of-coding">On the side of coding</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#a-few-brief-words-on-building-tools-and-ast-ir-inspection">A few brief words on building tools and ast-ir inspection</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#codegening">Codegening</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#allocation-of-the-stack-and-mem2reg">Alloca(tion of the stack) and mem2reg</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#variables">Variables</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#control-flow">Control flow</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#functions-and-extern-via-prototypeast">Functions and Extern (via PrototypeAST)</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#case-study-printf">Case study: printf</a></li></ol></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#garbage-collection">Garbage collection</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#lets-talk-a-bit-about-records-or-structs">Let's talk a bit about records (or structs)</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#shadow-stack-gc--reference-counting-definition">Shadow stack GC + Reference counting definition</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#shadow-stack">Shadow stack</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#case-study-malloc">Case study: malloc</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#epilogue">Epilogue</a></li></ol></li></ol></li></ol></nav><h2 id="prologue"><a aria-hidden="true" tabindex="-1" href="#prologue"><span class="icon icon-link"></span></a>Prologue</h2>
<p>Hey everyone, how everyone's doing? I've graduated Berkeley and have been back at my parents' place for a while now,
getting
ready to start
Igalia :)
I'm still doing good hahhaa :)</p>
<p>I always thought getting back to OC after being far far away in Berkeley wonderland means that everything's gonna
change for me: I won't have to do homework anymore :) I'll go to bed early blabla bla; But here I am writing this
blog at 2 AM hahhaha. I realized that changing the environment doesn't necessarily change me personally; I'd need
to change myself on my own :) Being next to my family makes me really grateful, but now I'm starting to miss my
high school teacher as well as my nanny in Viet Nam. I really wanna go back soon :)</p>
<p>Anyways, let's talk business hahah :)
This article documents what I've learned about the basics of LLVM's code generation process, self-contained in
lowering from AST to LLVM-IR. This includes basic stack variables, addition, subtraction, etc etc to strings, structs
as well as garbage collection.</p>
<p>As is tradition, here are three songs for you by Zedd: <a href="https://youtu.be/HwtljkGZJnI?si=6kS1eXfN3DS7TokP" rel="nofollow" target="_blank">Papercut</a>,
<a href="https://youtu.be/ZqJiXLJs_Pg?si=P8as3-nXevZ3BfuA" rel="nofollow" target="_blank">Addicted To A Memory</a>, and
<a href="https://youtu.be/BjsjIkSb0cM?si=rNyI9JeS6N5r1NFc" rel="nofollow" target="_blank">Done With Love</a>. All
three songs showcase extremely well the emotional depth of a person in and out of love.</p>
<p>I hope you enjoy the songs (and the blog post as well!) :)</p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h2>
<p>Codegen in LLVM is an extremely well-thought-out process. For a simple stack-centric codegen
process, the framework
users
can abstract away SSA form; the <strong>alloca</strong> process together with mem2reg allows an
extremely fast assembly generation even for primitive stack allocations.</p>
<p>In this article, I'll report on the codegen process of sammine-lang, an extension on the kaleidoscope tutorial.
Besides code generation for scalar values, funcitons and control flow, the article also touches on code gen for
aggregated data types such as structs :) I hope everyone enjoys :)</p>
<p>The below picture demonstrates sammine's ability to generate code for fibonacci, a classic mathematical problem :)
[TODO: show that sammine can indeed code fibonacci and output assembly for it]</p>
<p>Aggregated datatype's also generated with sammine:
[TODO: show that sammine can indeed code record]</p>
<h2 id="on-the-side-of-coding"><a aria-hidden="true" tabindex="-1" href="#on-the-side-of-coding"><span class="icon icon-link"></span></a>On the side of coding</h2>
<h3 id="a-few-brief-words-on-building-tools-and-ast-ir-inspection"><a aria-hidden="true" tabindex="-1" href="#a-few-brief-words-on-building-tools-and-ast-ir-inspection"><span class="icon icon-link"></span></a>A few brief words on building tools and ast-ir inspection</h3>
<h2 id="codegening"><a aria-hidden="true" tabindex="-1" href="#codegening"><span class="icon icon-link"></span></a>Codegening</h2>
<h3 id="allocation-of-the-stack-and-mem2reg"><a aria-hidden="true" tabindex="-1" href="#allocation-of-the-stack-and-mem2reg"><span class="icon icon-link"></span></a>Alloca(tion of the stack) and mem2reg</h3>
<p>todo talk about allocation of the stack, first draws out an example of the global var in llvm ir</p>
<h3 id="variables"><a aria-hidden="true" tabindex="-1" href="#variables"><span class="icon icon-link"></span></a>Variables</h3>
<p>discuss three modes:</p>
<ul>
<li>creation: in var def and the map that keeps it, this done using alloca</li>
<li>modification: in binary op =, this stores to address of alloca</li>
<li>read: this loads from address of alloca.</li>
</ul>
<p>todo: talks about in relation to the walk and visitor pattern</p>
<h3 id="control-flow"><a aria-hidden="true" tabindex="-1" href="#control-flow"><span class="icon icon-link"></span></a>Control flow</h3>
<p>discuss how alloca makes this easier.</p>
<h3 id="functions-and-extern-via-prototypeast"><a aria-hidden="true" tabindex="-1" href="#functions-and-extern-via-prototypeast"><span class="icon icon-link"></span></a>Functions and Extern (via PrototypeAST)</h3>
<p>todo: talk about a caveat that we need to allocate "alloca" addresses at the start of the function.
todo: relate to how strong the visitor pattern is</p>
<h4 id="case-study-printf"><a aria-hidden="true" tabindex="-1" href="#case-study-printf"><span class="icon icon-link"></span></a>Case study: printf</h4>
<p>Back in Berk, I sometimes would play <a href="https://www.factorio.com/" rel="nofollow" target="_blank">Factorio</a> in my free time. The game is intuitive
and interesting. But for some
reasons, the game really stresses me out. "Wait a minute, I love problem-solving, don't I? But I feel so stressed
trying to build the factory with these new science packs and these new different energy types." Now, in this summer
of 2025, when I'm writing my own compiler, I suddenly realize the reason. I love problem sovling, but I was solving
the wrong problems. I wasn't interested in trying to build and maintain factories. Rather, compiler always seems to have
a softer spot in my heart. That and blog writing, hence I'm writing this :)</p>
<p>Ah, I still don't know what I'm rambling
about. I guess what I'm trying to say is in that in my experience, while I enjoy problem-solving in general, it also
matters what type of problems I'm solving. Factorio, leaning hard into resource management and logistics, just isn't
my forte, which is creative expression (writing), coding and abstraction (compiler engineer). Maybe front-end
and/or back-end
development
isn't what you love,
then you
should consider switching to compiler engineering, ahhahahha :P</p>
<p>Anyways, let's now talk about the
lowering of printing..</p>
<p>Right now, in sammine, I'm adopting a python-esque way of printing:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="plaintext" data-theme="github-dark-dimmed"><code data-language="plaintext" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span>print(x);  # x and y are variables in this case</span></span>
<span data-line=""><span>println(y);</span></span>
<span data-line=""><span>println(2.4 + 5.3); # printing should also support expressions</span></span><button type="button" title="Copy code" aria-label="Copy code" data="print(x);  # x and y are variables in this case
println(y);
println(2.4 + 5.3); # printing should also support expressions" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>With int and double powered by alloca, how should we go around lowering this?</p>
<p>We know that in libc, the signature for printf() is bla bla bla hahaha</p>
<ul>
<li>print(2)</li>
<li>print("x")</li>
<li>println(2.4)</li>
</ul>
<p>What we'll do is, depending on the type via the AST, we'll access the</p>
<h3 id="garbage-collection"><a aria-hidden="true" tabindex="-1" href="#garbage-collection"><span class="icon icon-link"></span></a>Garbage collection</h3>
<h4 id="lets-talk-a-bit-about-records-or-structs"><a aria-hidden="true" tabindex="-1" href="#lets-talk-a-bit-about-records-or-structs"><span class="icon icon-link"></span></a>Let's talk a bit about records (or structs)</h4>
<h4 id="shadow-stack-gc--reference-counting-definition"><a aria-hidden="true" tabindex="-1" href="#shadow-stack-gc--reference-counting-definition"><span class="icon icon-link"></span></a>Shadow stack GC + Reference counting definition</h4>
<p>Alright, let me provide some definition about shadow stack scheme as well as the mark and sweep algorithm.</p>
<p>Shadow stack scheme: the reason the shadow stack scheme got its name is because the stack in this scheme is
invisible to the machine :) Each function, when we lower them from AST to LLVM-IR, will add onto itself a so-called
"stack_entry" struct. This struct will maintain records of how many objects are allocated in the current function as
well as where the caller of the current function's stack entry is. It got its name due to the fact that it doesn't
have to mess with the stack model of any specific platform. Indeed, according to the llvm docs: " has a significant
portability advantage because it requires no special support from the target code generator,
and does not require tricky platform-specific code to crawl the machine stack." Unfortunately, having to create each
"stack_entry" for each function and perform bookkeeping on a non-native level, it's slower than other schemes.</p>
<p>Ref counting:</p>
<h4 id="shadow-stack"><a aria-hidden="true" tabindex="-1" href="#shadow-stack"><span class="icon icon-link"></span></a>Shadow stack</h4>
<p>When a function <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>y</span></span><button type="button" title="Copy code" aria-label="Copy code" data="y" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>  is called from a function <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>x</span></span><button type="button" title="Copy code" aria-label="Copy code" data="x" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>. The function y needs to know that x is its caller. Unfortunately, at the llvm IR, everything is abstracted away with the call() syntax.</p>
<p>-> This means <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>y</span></span><button type="button" title="Copy code" aria-label="Copy code" data="y" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> doesn't actually know who its caller is.</p>
<p>We'll solve this by maintaining a list of stack entries:</p>
<ul>
<li>Each time a calle is called, the caller needs to construct and push a new stack entry onto the global linked list of stack entries.</li>
<li>When the callee wakes up, it know exactly who its caller is, just by querying the global linked list.</li>
<li>One problem remains: should the callee pops the stack entry when its done? or should the caller? (maybe something to do with main)</li>
</ul>
<h4 id="case-study-malloc"><a aria-hidden="true" tabindex="-1" href="#case-study-malloc"><span class="icon icon-link"></span></a>Case study: malloc</h4>
<h1 id="epilogue"><a aria-hidden="true" tabindex="-1" href="#epilogue"><span class="icon icon-link"></span></a>Epilogue</h1>
<p>The article, as you can tell, is directed towards new grads and/or beginners in LLVM. If you've benefited from the article
or if you'd like to support my writing these blogs, please consider <a href="">getting me a red bull</a> :)</p>
<p>I also want to extend my thanks to all the developers that helped contributed to the
Kaleidoscope. Without them, the journey to generate code, as well as the creation of this article, would be
ten-fold harder. I realize that we all stands on the shoulder of the previous generations and of giants and I would like to pay my tribute to them.</p>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[ONGOING] Extending LLVM's Kaleidoscope: Code-gen edition"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"8888-08-08"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}]]}]
a:{"metadata":[["$","title","0",{"children":"[ONGOING] Extending LLVM's Kaleidoscope: Code-gen edition"}],["$","meta","1",{"name":"description","content":"Jasmine extends her language with string, tuple, if-else codegen together with a garbage collector"}],["$","link","2",{"rel":"icon","href":"/_next/static/media/pfp6.723cdd8c.png"}],["$","$L12","3",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
