1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","880","static/chunks/app/posts/%5Bid%5D/page-8778b7e42f8ceed2.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[7921,["874","static/chunks/874-437a265a67d6cfee.js","63","static/chunks/63-63ed21df6f1fc3e7.js","177","static/chunks/app/layout-05e345a4cd50b3e1.js"],"default"]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/3b37cf79ceb9ce8f.css","style"]
:HL["/_next/static/css/8a287c41de7a8698.css","style"]
0:{"P":null,"b":"nyohXSh0_amduWA9kPyA9","p":"","c":["","posts","going_to_mlir_gym_2"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","going_to_mlir_gym_2","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3b37cf79ceb9ce8f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","going_to_mlir_gym_2","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8a287c41de7a8698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
12:I[8175,[],"IconMark"]
11:T19b0b,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#reader-supporting-section">Reader supporting section</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#differences">Differences</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#steps">Steps</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#phis-in-register-allocation-41">Phis in register allocation (4.1)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#topo-blocks-and-numbering-42">Topo blocks and numbering (4.2)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#building-live-intervals-43">Building live intervals (4.3)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#coalescing-arguments">Coalescing arguments</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#assigning-registers">Assigning registers</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#obstacles">Obstacles</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#resources">Resources</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#papers">Papers</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#textbooks">Textbooks</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#ai-tools">AI tools</a></li></ol></li></ol></nav><p><a href="https://www.youtube.com/watch?v=zAgVtzhjfCA&#x26;ab_channel=SabrinaCarpenter-Topic" rel="nofollow" target="_blank">Please, please, please</a> don't read
it now. It's unfinished, and I'm not sure if it'll go into impl or design doc :)</p>
<h2 id="prologue"><a aria-hidden="true" tabindex="-1" href="#prologue"><span class="icon icon-link"></span></a>Prologue</h2>
<p>Hi everyone, I hope everybody's been great :) I hope you like my last report for my graduate class <a href="https://badumbatish.github.io/posts/going_to_mlir_gym_1" rel="nofollow" target="_blank">here</a>. This article is also related to the same project. It
discusses the
SSA linear scan
register
allocation algorithm and the steps taken to implement it.</p>
<p>Just like the last MLIR report post, I also include a supporting section (<strong>SS</strong>) right before the introduction for
unfamiliar
reader in the compiler space.</p>
<p>Without reading the SS, I assume interested readers are familiar with some basic middle-end IR concepts (e.g <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>
notation, liveness analysis, loops).</p>
<p>With reading the SS, there is some context from the last report's <a href="https://badumbatish.github.io/posts/going_to_mlir_gym_1#reader-supporting-section" rel="nofollow" target="_blank">SS</a> that I think would be helpful.</p>
<p>And as is tradition, I also wanna share a <a href="https://www.youtube.com/watch?v=5HFyoxqUi0g&#x26;ab_channel=CROWONHYENAS" rel="nofollow" target="_blank">song</a> for
you to listen to while reading. Initially it was between this song and <a href="https://www.youtube.com/watch?v=eW6f7mEXfPQ&#x26;ab_channel=HipHopDXAsia" rel="nofollow" target="_blank">that</a> song. What can I say? I guess this is a long form way to say I want you to listen to
both :)</p>
<p>I hope everybody enjoys :)</p>
<h2 id="reader-supporting-section"><a aria-hidden="true" tabindex="-1" href="#reader-supporting-section"><span class="icon icon-link"></span></a>Reader supporting section</h2>
<p></p><details><summary>Open Reader supporting section</summary><p></p>
<ul>
<li>
<p>Dominance: In a CFG, with the entry basic block <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">BB_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and any two basic block A and B, if all paths from
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">BB_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to B goes through A, then A is said to dominate B. The notation for dominance is A
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≫</mo></mrow><annotation encoding="application/x-tex">\gg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">≫</span></span></span></span> B and every node is said to dominate itself.</p>
</li>
<li>
<p>Dataflow analysis: Abstractly, dataflow analysis is a way to understand how data moves and changes throughout a
computer program.
It helps us track what happens to different values (like variables) as the program runs from start to finish.</p>
</li>
</ul>
<p>For example, when <a href="https://en.wikipedia.org/wiki/Reaching_definition" rel="nofollow" target="_blank">reaching definition</a> is
run, the compiler can detect if some variable is possibly uninitialized and warn us if such cases appear:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="rust" data-theme="github-dark-dimmed"><code data-language="rust" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#768390">// Just an example for reaching definition.</span></span>
<span data-line=""><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> reaching_def_example</span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">condition</span><span style="color:#F47067">:</span><span style="color:#F69D50"> bool</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">    let</span><span style="color:#ADBAC7"> x</span><span style="color:#F47067">:</span><span style="color:#F69D50"> i32</span><span style="color:#ADBAC7">; </span><span style="color:#768390">// x is declared but not initialized</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    if</span><span style="color:#ADBAC7"> condition </span><span style="color:#6bc46d">{</span><span style="color:#ADBAC7"> </span><span style="color:#768390">// if this `if` condition is `false`,</span></span>
<span data-line=""><span style="color:#ADBAC7">       x </span><span style="color:#F47067">=</span><span style="color:#6CB6FF"> 5</span><span style="color:#ADBAC7">;      </span><span style="color:#768390">// `x` is not initialized</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#DCBDFB">    println!</span><span style="color:#6bc46d">(</span><span style="color:#96D0FF">"{}"</span><span style="color:#ADBAC7">, x</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">; </span><span style="color:#768390">// Warning: x might be uninitialized</span></span>
<span data-line=""><span style="color:#768390">                      // if condition is false</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// Just an example for reaching definition.
fn reaching_def_example(condition: bool) {
    let x: i32; // x is declared but not initialized

    if condition { // if this &#x60;if&#x60; condition is &#x60;false&#x60;,
       x = 5;      // &#x60;x&#x60; is not initialized
    }

    println!(&#x22;{}&#x22;, x); // Warning: x might be uninitialized
                      // if condition is false
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<ul>
<li>Loop header: In hand with dominance, a block is said to be a loop header if it dominates one of its
predecessors (a block that points to it). Knowing what a loop header is, and later identifying it would be of great
help in
our live intervals (of our linear register allocator) construction. As in the paper by Wimmer and Franz, their live
intervals construction bypasses the dataflow analysis cost itself, simply on the concept of dominance and loop header.</li>
</ul>
<p>Before heading further, let's look at an example for the two concepts.</p>
<p>In this control flow graph, A dominates every BB, including itself.
B dominates D; even though there is a path from
D to B, it must have first passed from B first. Since B dominates its predecessor, B is a loop header; hence,
there is a loop :)</p>
<p>D is:
<img src="/blogs/dominance_mlir_gym_2.svg" alt="dominance_mlir_gym_2.svg"></p>
<ul>
<li>Live interval and Live ranges pre-notes: Different papers derive the meaning of a live range differently. For example,
in Engineering a
Compiler 2nd Edition pg. 690, live range is a closed set of pairs of use and def locations. In Mössenböck &#x26;
Pfeiffer, the roughly same definition is dedicated to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>live intervals</span></span><button type="button" title="Copy code" aria-label="Copy code" data="live intervals" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, leaving the meaning of <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>range</span></span><button type="button" title="Copy code" aria-label="Copy code" data="range" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> to just mean
a pair of <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>use</span></span><button type="button" title="Copy code" aria-label="Copy code" data="use" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>def</span></span><button type="button" title="Copy code" aria-label="Copy code" data="def" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>. I chose to follow the definition laid out by Mössenböck &#x26; Pfeiffer where a live interval
contains an ordered list of live ranges. [todo, add some example here, or the next two section?]</li>
</ul>
<p>For example:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="plaintext" data-theme="github-dark-dimmed"><code data-language="plaintext" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span>// Add an example here pleaseeeeeeeee >,&#x3C;</span></span>
<span data-line=""> </span><button type="button" title="Copy code" aria-label="Copy code" data="// Add an example here pleaseeeeeeeee >,<
" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Overall, the concepts were born to ease the job of register allocators. If some variables are not live anymore
(since their definitions), their registers can be reused for another variable instead. In this view, contention for a
register (a scarce resource)
between some variables can instead be seen as the intersection (or lack thereof) between different live ranges. In
this effect, at the register allocation phase, the compiler effective translates the tradition SSA variable naming
scheme into a set of live intervals.</p>
<p>Hopefully, after
reading the two (closely related) definitions and seeing how they're defined to solve the same problem, we've cleared
up the
confusion.</p>
<ul>
<li>Terminologies: in this article, sometimes I refer to SSA variables as mlir::Value. This boils down to the same
concept: a variable that is defined only once (and cannot be changed).</li>
</ul>
<p></p></details><p></p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h2>
<p>todo: refer to this <a href="https://ieeexplore.ieee.org/document/7924389" rel="nofollow" target="_blank">https://ieeexplore.ieee.org/document/7924389</a>
Register allocation is an important aspect in the compiler construction phase.
Registers being the fastest
(but most limited) in the memory hierarchy, the compiler's register allocator must be strategic about this
resource, more usages in registers instead of the stack means reduced latency and
improved execution speed.</p>
<p>In the case of our recompiler, the main motivation related to obfuscation. <a href="https://farena.in/" rel="nofollow" target="_blank">Edu</a>'s employer,
<a href="https://www.quarkslab.com/" rel="nofollow" target="_blank">Quarkslab</a> is interested in applying obfuscation method to DEX files. With the methods
generating a lot of virtual registers, there were concerns about it exceeding the limit of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>=</mo><mn>65</mn><mo separator="true">,</mo><mn>536</mn></mrow><annotation encoding="application/x-tex">2^{16} = 65,536</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">65</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">536</span></span></span></span> virtual
registers. In this case, the linear register allocation project helps bring down the number of virtual registers under
the limit (of course they can just run less obfuscation hahahah).</p>
<p>This article then draws the learning mainly from three sources: the text book Engineer a Compiler, and two papers
from Mössenböck &#x26; Pfeiffer <a href="https://link.springer.com/content/pdf/10.1007/3-540-45937-5_17.pdf" rel="nofollow" target="_blank">MP02</a> and Wimmer &#x26; Franz <a href="http://www.christianwimmer.at/Publications/Wimmer10a/Wimmer10a.pdf" rel="nofollow" target="_blank">WF10</a>.</p>
<p>Personally, this is also another opportunity for me to improve my compiler arsenal. Some undergraduate compiler
classes leave this part out or only as part of a pen and paper exercise; knowing how to perform register allocation
(and writing about it)
would be a big push in the direction.</p>
<p>All discussed concepts are driven from the links in the resources section.</p>
<h2 id="differences"><a aria-hidden="true" tabindex="-1" href="#differences"><span class="icon icon-link"></span></a>Differences</h2>
<p>We're planning to improve the lowering of MjolnIR to smali. What this means is that instead of lowering directly
from SSA variables to virtual registers with
<span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span style="color:#F47067">template</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F47067">class</span><span style="color:#F69D50"> Aspect</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F47067">class</span><span style="color:#F69D50"> SmaliCounter</span></span><button type="button" title="Copy code" aria-label="Copy code" data="template<class Aspect> class SmaliCounter" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, we lower indirectly with our register
allocation, first translating them into the namespace of live intervals first, then down to virtual registers.</p>
<p>More specifically, we'll :</p>
<ul>
<li>Produce live intervals from ssa values and their uses and defs.</li>
<li>Optionally merge <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>compatible</span></span><button type="button" title="Copy code" aria-label="Copy code" data="compatible" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> live intervals together (the process is called coalescing).</li>
<li>Lower down to virtual registers.</li>
</ul>
<p>This new process introduces new stages that are clearly described and compared through this diagram.</p>
<p>[todo add mermaid here]</p>
<h2 id="steps"><a aria-hidden="true" tabindex="-1" href="#steps"><span class="icon icon-link"></span></a>Steps</h2>
<p>To say that linear register allocation simply comprises 3 steps is a simplification. The three big steps eventually
break down into substeps when a reader starts asking these questions of the sort: Where and how do
we get our live intervals? How do we map SSA value to a said interval? What mechanics helps us merge <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>compatible</span></span><button type="button" title="Copy code" aria-label="Copy code" data="compatible" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>? How is
MLIR helping here? We'll</p>
<ul>
<li>First discuss the problem of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> in the context of live intervals.</li>
<li>Number the mlir operation via the topological ordering of basic blocks.</li>
<li>Construct our live intervals.</li>
<li>Coalesce</li>
<li>Translate to virtual registers, during this time we might split intervals to produce what is called live holes.</li>
</ul>
<p>It is important to note that although I follow the MP02 paper, some recaps for WF10 will also be noted.</p>
<h2 id="phis-in-register-allocation-41"><a aria-hidden="true" tabindex="-1" href="#phis-in-register-allocation-41"><span class="icon icon-link"></span></a>Phis in register allocation (4.1)</h2>
<p>The (natural) nuisance of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>s is rooted in the idea of false registers contention. If two basic blocks <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> with their respective SSA
variables <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> both connect at basic block <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> with the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">\phi_{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, the two SSA variables (and the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>)
all refers to the same entity. In this case, even though the live range of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> clashes together,
they should still share the same register.</p>
<p>To navigate this, we often perform a preprocessing step called copy generation or move generation: add a proxy move instruction
and introduce new SSA variables to make sure that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> doesn't clash anymore, then perform a step called register coalesce to join them together.</p>
<p>In this context, different papers (MP02 and WF10) handle this problem differently in terms of preprocessing the graph.
Expectedly, the two papers made
no mention of MLIR (of course hahaa).</p>
<p>Idea: The idea is that in MLIR, we can use MjolnIR's move op on these.</p>
<p>these <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the resulting
operands of
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">B_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'s terminators and
that when the control flows to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, their representation turns into <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">\phi_{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Simply put, we can focus on
generating the virtual registers for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">\phi_{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and produce redundant moves as the first step for the algorithm.</p>
<p>todo: show the graph of B1 and B2 flowing into C.
todo: discuss Brock and then wimmer.</p>
<h2 id="topo-blocks-and-numbering-42"><a aria-hidden="true" tabindex="-1" href="#topo-blocks-and-numbering-42"><span class="icon icon-link"></span></a>Topo blocks and numbering (4.2)</h2>
<p>In order for a live range to make sense, we need to know where (or when) does an SSA value start living and where (or when)
does an SSA value ends its life. To do this, we need to number the instruction topologically.</p>
<p>In linear scan register allocation, after we have handled our <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>s as prescribed above, we then flatten the CFG
into a list of
basic blocks topologically. In a DAG, this reduces to Reverse Post Order traversal, or RPO for short.</p>
<p>The reason for this is todo: numbering the op</p>
<p>In both the MP02 and the
WF10 paper, this is achieved with an ordered list based on the BB's dominance. I should also note here that
ordered (in layperson terms)
means that if
block A arrives before block B, then block B cannot dominate block A.</p>
<p>Since the topological ordering of the graph naturally lends itself to a dominance ordered list, MLIR itself shows
its definition for <span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span style="color:#F69D50">mlir</span><span style="color:#ADBAC7">::getBlocksSortedByDominance</span></span><button type="button" title="Copy code" aria-label="Copy code" data="mlir::getBlocksSortedByDominance" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> as reverse-post-order DFS:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F69D50">SetVector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Block</span><span style="color:#F47067"> *</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F69D50">mlir</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">getBlocksSortedByDominance</span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">Region</span><span style="color:#F47067"> &#x26;</span><span style="color:#F69D50">region</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#768390">    // For each block that has not been visited yet (i.e. that has no</span></span>
<span data-line=""><span style="color:#768390">    // predecessors), add it to the list as well as its successors.</span></span>
<span data-line=""><span style="color:#ADBAC7">    SetVector</span><span style="color:#F47067">&#x3C;</span><span style="color:#ADBAC7">Block </span><span style="color:#F47067">*</span><span style="color:#F47067">></span><span style="color:#ADBAC7"> blocks;</span></span>
<span data-line=""><span style="color:#F47067">    for</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">Block </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">b : region</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#F47067">         if</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">blocks.</span><span style="color:#DCBDFB">count</span><span style="color:#ff938a">(</span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">b</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">==</span><span style="color:#6CB6FF"> 0</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">{</span></span>
<span data-line=""><span style="color:#F69D50">               llvm</span><span style="color:#ADBAC7">::ReversePostOrderTraversal</span><span style="color:#F47067">&#x3C;</span><span style="color:#ADBAC7">Block </span><span style="color:#F47067">*</span><span style="color:#F47067">></span><span style="color:#DCBDFB"> traversal</span><span style="color:#ff938a">(</span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">b</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">               blocks.</span><span style="color:#DCBDFB">insert</span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">traversal.</span><span style="color:#DCBDFB">begin</span><span style="color:#fc8dc7">(</span><span style="color:#fc8dc7">)</span><span style="color:#ADBAC7">, traversal.</span><span style="color:#DCBDFB">end</span><span style="color:#fc8dc7">(</span><span style="color:#fc8dc7">)</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">         </span><span style="color:#daaa3f">}</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""><span style="color:#DCBDFB">    assert</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">blocks.</span><span style="color:#DCBDFB">size</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">==</span><span style="color:#ADBAC7"> region.</span><span style="color:#DCBDFB">getBlocks</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">size</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">&#x26;&#x26;</span></span>
<span data-line=""><span style="color:#96D0FF">          "some blocks are not sorted"</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    return</span><span style="color:#ADBAC7"> blocks;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="SetVector<Block *> mlir::getBlocksSortedByDominance(Region &#x26;region) {
    // For each block that has not been visited yet (i.e. that has no
    // predecessors), add it to the list as well as its successors.
    SetVector<Block *> blocks;
    for (Block &#x26;b : region) {
         if (blocks.count(&#x26;b) == 0) {
               llvm::ReversePostOrderTraversal<Block *> traversal(&#x26;b);
               blocks.insert(traversal.begin(), traversal.end());
         }
    }
    assert(blocks.size() == region.getBlocks().size() &#x26;&#x26;
          &#x22;some blocks are not sorted&#x22;);

    return blocks;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>At this point, we've gotten our hands on the block list. But Wimmer and Franz introduce a stronger condition: all
blocks belonging to the same loop must be continuous and that "TODO".</p>
<p>Personally, I think the API provided by MLIR won't
satisfy
the condition; there is a chance that a loop header block might be followed by its exit, non-looping block, and then,
the blocks that belong to the loop body.</p>
<p>The write up here follows the MP02 paper more. Thus the need for loop detection is left as an <a href="https://pages.cs.wisc.edu/~fischer/cs701.f14/finding.loops.html" rel="nofollow" target="_blank">afterthought</a></p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#768390">                                        // the arg is from mlir::getBlocksSortedByDominance</span></span>
<span data-line=""><span style="color:#F69D50">SmaliCounter</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Operation</span><span style="color:#F47067">*</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#DCBDFB">numberOperation</span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">SetVector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Block</span><span style="color:#F47067">*</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#F69D50">blocks</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#ADBAC7">    SmaliCounter op_counter;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    for</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F47067">auto</span><span style="color:#F47067"> &#x26;</span><span style="color:#ADBAC7">block : blocks</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F47067">auto</span><span style="color:#F47067"> &#x26;</span><span style="color:#ADBAC7">op : block</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">           op_counter.</span><span style="color:#DCBDFB">get_counter</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">op</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    return</span><span style="color:#ADBAC7"> op_counter;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="                                        // the arg is from mlir::getBlocksSortedByDominance
SmaliCounter<Operation*> numberOperation(SetVector<Block*> blocks) {
    SmaliCounter op_counter;

    for (auto &#x26;block : blocks)
        for (auto &#x26;op : block)
           op_counter.get_counter(op);

    return op_counter;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<ul>
<li>
<p>Construct the live ranges (with live holes).</p>
</li>
<li>
<p>Construct the</p>
</li>
</ul>
<h2 id="building-live-intervals-43"><a aria-hidden="true" tabindex="-1" href="#building-live-intervals-43"><span class="icon icon-link"></span></a>Building live intervals (4.3)</h2>
<p>In MP02, the paper starts off with what it means for an SSA variable to be live. Since we know that for a variable to be
used in block b, it must have been defined in either b or one of its predecessors p.</p>
<p>Let's call <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mrow><mi>v</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{v,b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> the live range
of an SSA variable in a block. MP02 describes different intricacies in handling this:</p>
<ul>
<li>An algorithm on calculating live ranges</li>
<li>How the live range of a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> variable should be.</li>
</ul>
<p>TODO: say how phi's hard to handle
TODO: you really should define a live range class.
TODO: Talk about how the MP02 paper conflates the live range of an instruction with an SSA value.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">using</span><span style="color:#F69D50"> LRStart</span><span style="color:#F47067"> =</span><span style="color:#F47067"> uint32_t</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">using</span><span style="color:#F69D50"> LREnd</span><span style="color:#F47067">=</span><span style="color:#F47067"> uint32_t</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">using</span><span style="color:#F69D50"> LiveRange</span><span style="color:#F47067"> =</span><span style="color:#F69D50"> std</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">pair</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">LRStart</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">LREnd</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">;</span><span style="color:#768390"> // From above description</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">// todo: do add range here</span></span>
<span data-line=""><span style="color:#768390">// todo: readers probably find the algorithm too complicated. you might wanna draw some kind of diagram.</span></span>
<span data-line=""><span style="color:#F47067">void</span><span style="color:#DCBDFB"> add_range</span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">ins</span><span style="color:#F69D50"> i</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">ssa</span><span style="color:#F69D50"> value</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">block</span><span style="color:#F69D50"> b</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">end</span><span style="color:#ADBAC7">: </span><span style="color:#F47067">int32_t</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#768390">    // assume that ssa value ends its living at `end`</span></span>
<span data-line=""><span style="color:#768390">    // and that the instruction i uniquely defines the ssa value (of course cause its ssa duh hahaha)</span></span>
<span data-line=""><span style="color:#768390">    // jasmine plz do this</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    if</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">b.</span><span style="color:#DCBDFB">contains_instruction</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">i</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#ADBAC7">        live_interval</span><span style="color:#daaa3f">[</span><span style="color:#ADBAC7">value</span><span style="color:#daaa3f">]</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">combine_range</span><span style="color:#daaa3f">(</span><span style="color:#DCBDFB">numbering_of</span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">i</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">, end</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">else</span></span>
<span data-line=""><span style="color:#ADBAC7">        live_interval</span><span style="color:#6bc46d">[</span><span style="color:#ADBAC7">value</span><span style="color:#6bc46d">]</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">combine_range</span><span style="color:#6bc46d">(</span><span style="color:#DCBDFB">numbering_of</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">b.</span><span style="color:#DCBDFB">begin</span><span style="color:#ff938a">(</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, end</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">    // For example, the ranges [1,3[, [3,7[ are merged into a single range [1,7[</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""><span style="color:#F69D50">DenseMap</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Value</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">Vector</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">LiveRange</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#DCBDFB">build_intervals</span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">Region</span><span style="color:#F47067"> &#x26;</span><span style="color:#F69D50">region</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#768390">    // TODO: i know my ass will need the smali counter again soon. Maybe split the function here.</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">    // TODO: We get the value from the operand like this</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    for</span><span style="color:#ADBAC7"> b in </span><span style="color:#F69D50">blocks</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">        live </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span><span style="color:#6bc46d">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    for</span><span style="color:#ADBAC7"> b in </span><span style="color:#F69D50">blocks</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> s in b.</span><span style="color:#DCBDFB">get_successors</span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">        b.live </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> b.live.</span><span style="color:#DCBDFB">union</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">s.live</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> each argument arg of the block </span><span style="color:#F69D50">s</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">            b.live </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> b.live </span><span style="color:#F47067">-</span><span style="color:#ADBAC7"> arg</span></span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> each terminator t  in </span><span style="color:#F69D50">b</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">            b.live </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> b.live </span><span style="color:#F47067">union</span><span style="color:#F69D50"> t</span><span style="color:#ADBAC7">'s jump argument input</span></span>
<span data-line=""><span style="color:#ADBAC7">        for each ssa value v in live do:</span></span>
<span data-line=""><span style="color:#ADBAC7">            add_range</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">get_defining_instruction</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">v</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">v</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">b</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">numbering_of</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">b.end</span><span style="color:#ff938a">(</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> + 1</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">        for instruction i in b.reverse</span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#ADBAC7">            b.live = b.live - i.defining_result</span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">            for each op in i:</span></span>
<span data-line=""><span style="color:#ADBAC7">            if op not in live:</span></span>
<span data-line=""><span style="color:#ADBAC7">                b.live = b.live union op</span></span>
<span data-line=""><span style="color:#ADBAC7">                add_range</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">get_defining_instruction</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">op</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">op</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">b</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">numbering_of</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">i</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#768390">    // todo: we do this because although we visualize ssa as having an inherent counter, it is not visible in the</span></span>
<span data-line=""><span style="color:#ADBAC7">mlir api</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="using LRStart = uint32_t;
using LREnd= uint32_t;
using LiveRange = std::pair<LRStart, LREnd>; // From above description

// todo: do add range here
// todo: readers probably find the algorithm too complicated. you might wanna draw some kind of diagram.
void add_range(ins i, ssa value, block b, end: int32_t) {
    // assume that ssa value ends its living at &#x60;end&#x60;
    // and that the instruction i uniquely defines the ssa value (of course cause its ssa duh hahaha)
    // jasmine plz do this

    if (b.contains_instruction(i)) {
        live_interval[value].combine_range(numbering_of(i), end);
    } else
        live_interval[value].combine_range(numbering_of(b.begin()), end);

    // For example, the ranges [1,3[, [3,7[ are merged into a single range [1,7[
}
DenseMap<Value, Vector<LiveRange>> build_intervals(Region &#x26;region) {
    // TODO: i know my ass will need the smali counter again soon. Maybe split the function here.

    // TODO: We get the value from the operand like this

    for b in blocks:
        live = {}

    for b in blocks:
        for s in b.get_successors():
        b.live = b.live.union(s.live)
        for each argument arg of the block s:
            b.live = b.live - arg
        for each terminator t  in b:
            b.live = b.live union t&#x27;s jump argument input
        for each ssa value v in live do:
            add_range(get_defining_instruction(v), v, b, numbering_of(b.end()) + 1)
        for instruction i in b.reverse():
            b.live = b.live - i.defining_result()
            for each op in i:
            if op not in live:
                b.live = b.live union op
                add_range(get_defining_instruction(op), op, b, numbering_of(i))

    // todo: we do this because although we visualize ssa as having an inherent counter, it is not visible in the
mlir api
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>todo: Note that we will not directly output any register. What we'll do is we'll have a 2D hash map that given an
instruction and an SSA value, we get out some new virtual registers that is not dependent on the smali counter.</p>
<h2 id="coalescing-arguments"><a aria-hidden="true" tabindex="-1" href="#coalescing-arguments"><span class="icon icon-link"></span></a>Coalescing arguments</h2>
<p>mlir::Value has <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>hasOneUse()</span></span><button type="button" title="Copy code" aria-label="Copy code" data="hasOneUse()" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="plaintext" data-theme="github-dark-dimmed"><code data-language="plaintext" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span>if op = move a &#x3C;- b &#x26;&#x26; b.hasOneUse():</span></span>
<span data-line=""><span>    union(a, b, uf)</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span>mlir::Value find(mlir::Value v</span></span>
<span data-line=""><span>void union(mlir::Value a, mlir::Value b, UF uf) {</span></span>
<span data-line=""> </span>
<span data-line=""><span>}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="if op = move a <- b &#x26;&#x26; b.hasOneUse():
    union(a, b, uf)


mlir::Value find(mlir::Value v
void union(mlir::Value a, mlir::Value b, UF uf) {

}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h2 id="assigning-registers"><a aria-hidden="true" tabindex="-1" href="#assigning-registers"><span class="icon icon-link"></span></a>Assigning registers</h2>
<p>In greedily assigning SSA variables to registers -> needs priority queue to always get the lowest starting pointer
interval available.</p>
<p>note: need a register counter class, need composition for customized set.</p>
<p>note: need dedicated class for live range, it needs to optionally store a reg. It needs to have <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>bool ends_before (LiveRange other)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="bool ends_before (LiveRange other)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed" style="background-color:#22272e;color:#adbac7"><span data-line=""><span>bool no_overlap()</span></span><button type="button" title="Copy code" aria-label="Copy code" data="bool no_overlap()" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<p>note: set in C++ is binary tree, we can compromise speed of pq for ease of algo impl</p>
<p>4 different collections:</p>
<ul>
<li>unhandled (set): all intervals that start after cur.beg</li>
<li>handled (set) : all intervals end before cur.beg</li>
<li>active (set): all intervlas where one of the ranges overlap cur.beg</li>
<li>inactive (set): all intervals where cur.beg falls into one of their holes</li>
</ul>
<p>todo: explain to readers meaning of "ends before" versus "does not overlap"</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#22272e;color:#adbac7" tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#DCBDFB">LinearScan</span><span style="color:#6cb6ff">(</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">    auto</span><span style="color:#ADBAC7"> unhandled </span><span style="color:#F47067">=</span><span style="color:#DCBDFB"> get_ranges_from</span><span style="color:#6bc46d">(</span><span style="color:#DCBDFB">build_intervals</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">method</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">    DenseSet active, inactive, handled;</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    while</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F47067">!</span><span style="color:#ADBAC7">unhanlded.</span><span style="color:#DCBDFB">empty</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#F47067">        auto</span><span style="color:#ADBAC7"> curr </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> unhandled.</span><span style="color:#DCBDFB">top</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">; unhandled.</span><span style="color:#DCBDFB">pop</span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F47067">auto</span><span style="color:#ADBAC7"> i : active</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">{</span></span>
<span data-line=""><span style="color:#768390">            // todo</span></span>
<span data-line=""><span style="color:#ADBAC7">        </span><span style="color:#daaa3f">}</span></span>
<span data-line=""><span style="color:#F47067">        for</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F47067">auto</span><span style="color:#ADBAC7"> i : inactive</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">{</span></span>
<span data-line=""><span style="color:#768390">            // todo</span></span>
<span data-line=""><span style="color:#ADBAC7">        </span><span style="color:#daaa3f">}</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="LinearScan() {
    auto unhandled = get_ranges_from(build_intervals(method))
    DenseSet active, inactive, handled;


    while (!unhanlded.empty()) {
        auto curr = unhandled.top(); unhandled.pop();

        for (auto i : active) {
            // todo
        }
        for (auto i : inactive) {
            // todo
        }
    }
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>todo: no concept of spilled.</p>
<p>todo: if we don't assign mem loc to an SSA, we need to prove that assign mem loc is the same as not assigning mem loc.</p>
<h2 id="obstacles"><a aria-hidden="true" tabindex="-1" href="#obstacles"><span class="icon icon-link"></span></a>Obstacles</h2>
<h2 id="resources"><a aria-hidden="true" tabindex="-1" href="#resources"><span class="icon icon-link"></span></a>Resources</h2>
<h3 id="papers"><a aria-hidden="true" tabindex="-1" href="#papers"><span class="icon icon-link"></span></a>Papers</h3>
<ul>
<li>MP02 - <a href="https://link.springer.com/content/pdf/10.1007/3-540-45937-5_17.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation in the Context of SSA Form and Register Constraints</a> - Hanspeter Mössenböck and Michael Pfeiffer.</li>
<li>WF10 <a href="http://www.christianwimmer.at/Publications/Wimmer10a/Wimmer10a.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation on SSA Form</a> -
Christian Wimmer and Michael Franz.</li>
<li><a href="https://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf" rel="nofollow" target="_blank">Linear Scan Register Allocation</a> - Massimiliano
Poletto and Vivek Sarkar.</li>
</ul>
<h3 id="textbooks"><a aria-hidden="true" tabindex="-1" href="#textbooks"><span class="icon icon-link"></span></a>Textbooks</h3>
<ul>
<li><a href="https://www.goodreads.com/book/show/60277251-engineering-a-compiler" rel="nofollow" target="_blank">Engineering a Compiler</a> - Keith D. Cooper and Linda Torczon.</li>
</ul>
<h3 id="ai-tools"><a aria-hidden="true" tabindex="-1" href="#ai-tools"><span class="icon icon-link"></span></a>AI tools</h3>
<p>Hahahaha you're really funny.</p>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[HIATUS] Going to the gym with MLIR: Linear register allocation for ... a stackless virtual machine?"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"2025-01-16"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}]]}]
a:{"metadata":[["$","title","0",{"children":"[HIATUS] Going to the gym with MLIR: Linear register allocation for ... a stackless virtual machine?"}],["$","meta","1",{"name":"description","content":"Jasmine plans out register allocation for the DEX recompiler."}],["$","link","2",{"rel":"icon","href":"/_next/static/media/pfp5.0daa0f7d.jpeg"}],["$","$L12","3",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
