1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","880","static/chunks/app/posts/%5Bid%5D/page-f0f7551128d4c13f.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[7921,["874","static/chunks/874-437a265a67d6cfee.js","63","static/chunks/63-63ed21df6f1fc3e7.js","177","static/chunks/app/layout-05e345a4cd50b3e1.js"],"default"]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/3b37cf79ceb9ce8f.css","style"]
:HL["/_next/static/css/3864b451a61e4546.css","style"]
0:{"P":null,"b":"M7CTb-qAplPo4A_RCn6VQ","p":"","c":["","posts","hitchhiker_guide_to_llvm_debugging"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","hitchhiker_guide_to_llvm_debugging","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3b37cf79ceb9ce8f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","hitchhiker_guide_to_llvm_debugging","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3864b451a61e4546.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
12:I[8175,[],"IconMark"]
11:T5f52,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#prologue">Prologue</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#resources">Resources</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#compiling-and-execution-time">Compiling and execution time</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#release--assertion-andor-debug">(Release + Assertion) and/or (Debug)</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#build-your-targetsubproject-only">Build your target/subproject only</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#llvm-release-compilers">LLVM-release compilers</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#ccache">ccache</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#grepping">Grepping</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#git-git-blame-and-pull-requests">Git, Git blame and pull requests</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#godbolt--debug-only--print-after-all--print-changed-and-all-that">godbolt, -debug-only, -print-after-all, -print-changed and all that</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#inspecting-ir-changes">Inspecting IR changes</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#cutting-out-the-noise">Cutting out the noise</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#deep-diving-into-a-specific-passes">Deep diving into a specific passes</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#lldb-and-debuggers">lldb and debuggers</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#dump">dump.*</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#llvmutilslldbdataformatterspy">llvm/utils/lldbDataFormatters.py</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#conditional-breakpoints">Conditional breakpoints</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#tablegen">tablegen</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#grepping-tablegen">Grepping tablegen</a></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#gitbisect">gitbisect</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#llvm-reduce">llvm-reduce</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#rsp_bisectpy">rsp_bisect.py</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#llvm-extract">llvm-extract</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#reading-skills-experience-or-think-harder">Reading skills, experience, (or think harder)</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#asking-people">Asking people</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#acknowledgments">Acknowledgments</a></li></ol></nav><h1 id="prologue"><a aria-hidden="true" tabindex="-1" href="#prologue"><span class="icon icon-link"></span></a>Prologue</h1>
<p>Hello everyone, how's everybody doing? I'm still chugging away at solving LLVM issues at Igalia :) Fall and winter's
coming soon, and by the time this blog's up, I will be turning a year older. Welp, another year a few
more blogs am i right hahahahhaa.</p>
<p>A few weekends ago, I went up to Thousand Oaks and Malibu beach to visit my friend from Berkeley and then took an Amtrak with a date to
San Diego. Isn't life just beautiful like that? I couldn't have asked for more.</p>
<p>This blog will be detailing my debugging methods since working on LLVM. For the foreseeable future (while the blog
title has [ONGOING]), this blog will be continually updated with new knowledge of mine for any shortcomings as I'm still new to LLVM.</p>
<p>For external reviewers and discussion of this blog and others, you can join the discord server <a href="https://discord.gg/mvdVEqDQxn" rel="nofollow" target="_blank">here</a> or the discord link in my front page.</p>
<p>For internal reviewers at Igalia, you can also dm me on Matrix, up to your preferences!</p>
<p>As tradition, here's a <a href="https://www.youtube.com/watch?v=kvqfHcgIagI" rel="nofollow" target="_blank">song</a> for interested readers :) I hope everyone enjoys :)</p>
<h1 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h1>
<p>Debugging has always been a quintessential tool in a software engineer's toolboxes.</p>
<p>As a piece of software or framework gets more complicated, the flow of a program invariantly gets more complex, which requires software
engineers to careful and methodically investigate an issue/bug instead of blindly following one's instinct.</p>
<p>In this sense, although the article talks about debugging, the article inherently provides a sample of the author's problem-solving toolbox.</p>
<p>I hope this helps junior LLVM developer or low level developer just starting out in their journey!</p>
<p>Welp, let's dig in!</p>
<h1 id="resources"><a aria-hidden="true" tabindex="-1" href="#resources"><span class="icon icon-link"></span></a>Resources</h1>
<p>In writing the blog, I utilize these resources, including, but not excluding:</p>
<ul>
<li><a href="https://www.npopov.com/2023/10/22/How-to-reduce-LLVM-crashes.html" rel="nofollow" target="_blank">How to reduce LLVM crashes</a></li>
<li><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" rel="nofollow" target="_blank">Clear step by step to oneshot debugging any LLVM issue with ChatGPT</a></li>
<li><a href="https://git-scm.com/doc" rel="nofollow" target="_blank">Git manual</a></li>
<li><a href="https://llvm.org/docs/LangRef.html" rel="nofollow" target="_blank">LLVM lang ref</a></li>
</ul>
<h1 id="compiling-and-execution-time"><a aria-hidden="true" tabindex="-1" href="#compiling-and-execution-time"><span class="icon icon-link"></span></a>Compiling and execution time</h1>
<p>For a programmer working on a big codebase</p>
<h2 id="release--assertion-andor-debug"><a aria-hidden="true" tabindex="-1" href="#release--assertion-andor-debug"><span class="icon icon-link"></span></a>(Release + Assertion) and/or (Debug)</h2>
<p>Have two build profile</p>
<p>TODO: get the LLVM flags</p>
<h2 id="build-your-targetsubproject-only"><a aria-hidden="true" tabindex="-1" href="#build-your-targetsubproject-only"><span class="icon icon-link"></span></a>Build your target/subproject only</h2>
<p>For example, if you're doing majority webassembly or x86, don't build RISCV on top of it. For example, some tablegen changes in RISCV
takes a dozen of seconds to compile. Over the course of a week, if you're working on tablegen over the course of a week, it'll add up
to maybe half an hour or more.</p>
<p>TODO: get the LLVM flags</p>
<h2 id="llvm-release-compilers"><a aria-hidden="true" tabindex="-1" href="#llvm-release-compilers"><span class="icon icon-link"></span></a>LLVM-release compilers</h2>
<p>From David Spickett's comment on Discord:</p>
<blockquote>
<p>At least for Linux x86 and AArch64, LLVM's release archives on GitHub are already BOLT-ed (you can check with objdump -h clang | grep bolt). So if there are potential issues, we're all at risk 🙂
If you want to try BOLT-ing something yourself, <a href="https://github.com/llvm/llvm-project/blob/main/bolt/docs/OptimizingClang.md" rel="nofollow" target="_blank">https://github.com/llvm/llvm-project/blob/main/bolt/docs/OptimizingClang.md</a> seems like a good place to start (I've not done this myself).</p>
</blockquote>
<p>TODO: Show users the link for/on github release</p>
<h2 id="ccache"><a aria-hidden="true" tabindex="-1" href="#ccache"><span class="icon icon-link"></span></a>ccache</h2>
<p>You can use the LLVM's flag for ccache</p>
<p>TODO: get the LLVM flags</p>
<p>Also, use this option for ccache</p>
<h1 id="grepping"><a aria-hidden="true" tabindex="-1" href="#grepping"><span class="icon icon-link"></span></a>Grepping</h1>
<p>Something something grepping is very helpful</p>
<p>With such importance, often in the following sections, I will try to provide how grepping integrates with each area.</p>
<h1 id="git-git-blame-and-pull-requests"><a aria-hidden="true" tabindex="-1" href="#git-git-blame-and-pull-requests"><span class="icon icon-link"></span></a>Git, Git blame and pull requests</h1>
<p>For a beginner in a codebase (even a seasoned programmer),
the ability to obtain more information and context,
extending further than the code sitting in front of them, is extremely helpful.</p>
<p>With git blame: <a href="https://git-scm.com/docs/git-blame" rel="nofollow" target="_blank">https://git-scm.com/docs/git-blame</a></p>
<p>It's also helpful to look up on the internet for the commit's pull requests, either through github or through reviews.llvm.org</p>
<p>for example <a href="https://reviews.llvm.org/D124685?id=431828#inline-1213666" rel="nofollow" target="_blank">https://reviews.llvm.org/D124685?id=431828#inline-1213666</a> has a TODO, but without reading the PRs, the TODO would seem very unclear and hazy.</p>
<p>In other words, reading code is the first step, after that, commit messages provides greater additional context on the problems being solved and finally, the pull request
and the reviews.llvm provides opinions and directives.</p>
<p>With trying to explore what's happening for a subproject/subsection in LLVM, you can also utilize grepping in git without going through the github online gui.</p>
<p>Belows shows a picture of me applying git grep to the topic of WebAssembly where theres a mention of either "fold" or "DAG" via this command:</p>
<pre><code>git log --grep='WebAssembly' --grep='fold\|DAG' --all-match
</code></pre>
<p><img src="/blogs/hitchhiker_guide_to_llvm_debugging/git_grep_wasm_fold_dag.png" alt="showing git grep"></p>
<h1 id="godbolt--debug-only--print-after-all--print-changed-and-all-that"><a aria-hidden="true" tabindex="-1" href="#godbolt--debug-only--print-after-all--print-changed-and-all-that"><span class="icon icon-link"></span></a>godbolt, -debug-only, -print-after-all, -print-changed and all that</h1>
<p>If you haven't heard of godbolt, think of it as a way for compiler developer to say no to "but but but it works on my machineeee :('</p>
<h2 id="inspecting-ir-changes"><a aria-hidden="true" tabindex="-1" href="#inspecting-ir-changes"><span class="icon icon-link"></span></a>Inspecting IR changes</h2>
<p>TODO: Explain this in a way that's akin to -print-changed</p>
<p><img src="/blogs/hitchhiker_guide_to_llvm_debugging/godbolt_show_opt.png" alt="godbolt_show_opt"></p>
<h2 id="cutting-out-the-noise"><a aria-hidden="true" tabindex="-1" href="#cutting-out-the-noise"><span class="icon icon-link"></span></a>Cutting out the noise</h2>
<h2 id="deep-diving-into-a-specific-passes"><a aria-hidden="true" tabindex="-1" href="#deep-diving-into-a-specific-passes"><span class="icon icon-link"></span></a>Deep diving into a specific passes</h2>
<p>After you've filtered out the specific pass that you think are affecting your</p>
<h1 id="lldb-and-debuggers"><a aria-hidden="true" tabindex="-1" href="#lldb-and-debuggers"><span class="icon icon-link"></span></a>lldb and debuggers</h1>
<p>If</p>
<p>If you've ever heard of gdb (the GNU debugger) from gcc (the GNU compiler collection)
Give motivational thinking about</p>
<p>lldb has auto repeat on when you press sth then you press return</p>
<h2 id="dump"><a aria-hidden="true" tabindex="-1" href="#dump"><span class="icon icon-link"></span></a>dump.*</h2>
<p>The <code>dump()</code> helper function in llvm is basically a pretty printer for</p>
<p>A lot of the time, when you perform
ripgrep <code>void dump.*\(\) </code>
Loop class has dumpVerbose</p>
<p>RegAlloc class has dumpState</p>
<h2 id="llvmutilslldbdataformatterspy"><a aria-hidden="true" tabindex="-1" href="#llvmutilslldbdataformatterspy"><span class="icon icon-link"></span></a>llvm/utils/lldbDataFormatters.py</h2>
<p>lldbDataFormatters.py (LDF) is a python script to integrate with LLDB. In LLDB, when you print a specific LLVM data structure
that doesn't have the <code>dump()</code> helper function, things can get a bit messy due to how the debugger's treating the data structure as
a pointer only.</p>
<p>For LLVM-specific data structures, LDF provides helpful pretty printer for DenseMap, DenseSet, StringRef, SmallVector, SmallStrings</p>
<p>To utilize the script, once you fire up LLDB, you can provide LLDB with <span class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#E78284;font-style:italic">command</span><span style="color:#A6D189"> script</span><span style="color:#A6D189"> import</span><span style="color:#A6D189"> PathToScript/lldbDataFormatters.py</span></span></code></span>
where PathToScript is the directory path to LDF.</p>
<p>For example, if you're debugging in <code>llvm-project</code>, which houses the lldbDataFormatters naturally in llvm/utils:</p>
<pre><code>...
(lldb) command script import llvm/utils/lldbDataFormatters.py
...
</code></pre>
<p>Here's a picture showing the before and after importing the formatter script:</p>
<p><img src="/blogs/hitchhiker_guide_to_llvm_debugging/showcase_lldbDataFormatters.png" alt="showcase_lldbformatters"></p>
<p>Alas, a programmer would not be a programmer if not for their automation. It would be an inconvenience (and a detriment to their productivity)
if a programmer were supposed to remember the script import command and then remember to type it in
every time.</p>
<p>Instead, you can add this to <code>.lldbinit</code> in your home directory and let the computer perform said steps for you:</p>
<pre><code>script
"llvm-project" in os.getcwd() and lldb.debugger.HandleCommand("command script import llvm/utils/lldbDataFormatters.py")
</code></pre>
<h2 id="conditional-breakpoints"><a aria-hidden="true" tabindex="-1" href="#conditional-breakpoints"><span class="icon icon-link"></span></a>Conditional breakpoints</h2>
<p>Personally, I set up a keymap in my neovim so I don't have to type so much. Here's the lua code for the keymap</p>
<pre class="shiki catppuccin-frappe" style="background-color:#303446;color:#c6d0f5" tabindex="0"><code><span class="line"><span style="color:#CA9EE6">local</span><span style="color:#8CAAEE;font-style:italic"> yank_for_conditional_break</span><span style="color:#81C8BE"> =</span><span style="color:#CA9EE6"> function</span><span style="color:#949CBB"> ()</span></span>
<span class="line"><span style="color:#CA9EE6">    local</span><span style="color:#C6D0F5"> path </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> vim.fn.</span><span style="color:#8CAAEE;font-style:italic">expand</span><span style="color:#C6D0F5">(</span><span style="color:#A6D189">'%:.'</span><span style="color:#C6D0F5">)</span></span>
<span class="line"><span style="color:#CA9EE6">    local</span><span style="color:#C6D0F5"> line </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> vim.fn.</span><span style="color:#8CAAEE;font-style:italic">line</span><span style="color:#C6D0F5">(</span><span style="color:#A6D189">'.'</span><span style="color:#C6D0F5">)</span></span>
<span class="line"><span style="color:#CA9EE6">    local</span><span style="color:#C6D0F5"> word </span><span style="color:#81C8BE">=</span><span style="color:#C6D0F5"> vim.fn.</span><span style="color:#8CAAEE;font-style:italic">expand</span><span style="color:#C6D0F5">(</span><span style="color:#A6D189">"&#x3C;cword>"</span><span style="color:#C6D0F5">)</span></span>
<span class="line"><span style="color:#CA9EE6">    local</span><span style="color:#C6D0F5"> result </span><span style="color:#81C8BE">=</span><span style="color:#A6D189"> 'breakpoint set --file '</span><span style="color:#81C8BE">..</span><span style="color:#C6D0F5"> path </span><span style="color:#81C8BE">..</span><span style="color:#A6D189"> ' --line ' </span><span style="color:#81C8BE">..</span><span style="color:#C6D0F5"> line </span><span style="color:#81C8BE">..</span><span style="color:#A6D189"> ' --condition ' </span><span style="color:#81C8BE">..</span><span style="color:#A6D189"> '</span><span style="color:#F4B8E4">\'</span><span style="color:#A6D189">' </span><span style="color:#81C8BE">..</span><span style="color:#C6D0F5"> word</span></span>
<span class="line"><span style="color:#C6D0F5">    vim.fn.</span><span style="color:#8CAAEE;font-style:italic">setreg</span><span style="color:#C6D0F5">(</span><span style="color:#A6D189">'+'</span><span style="color:#C6D0F5">, result)</span></span>
<span class="line"><span style="color:#CA9EE6">end</span></span></code></pre>
<h1 id="tablegen"><a aria-hidden="true" tabindex="-1" href="#tablegen"><span class="icon icon-link"></span></a>tablegen</h1>
<p>For a short overview on tablegen, the <a href="https://llvm.org/docs/TableGen/" rel="nofollow" target="_blank">LLVM tablegen docs</a> cannot be more succint:</p>
<blockquote>
<p>TableGen’s purpose is to help a human develop and maintain records of domain-specific information.
... [reducing] the amount of duplication, the chance of error, and [making] it easier to structure domain specific information.</p>
</blockquote>
<p>.td (tablegen) files are ubiquitous in the LLVM world; if you have contributed to LLVM, chances are you've read a <code>.td</code> file.
If something's wrong with a tablegen, a programmer needs to understand at least the debugging techniques for a tablegen file.</p>
<p>When a .td file is table-generated, it spits out an .inc (<code>include</code>) file in the build folder</p>
<p>TODO: Mention a developer's love hate relationship with tablegen, for example, with Jeremy Kun's perspective on mlir's tablegen:</p>
<blockquote>
<p>It sounds nice, but I have a love hate relationship with tablegen. I personally find it to be unpleasant to use, primarily because it provides poor diagnostic information when you do things wrong. Today, though, I realize that my part of my frustration came from having the wrong initial mindset around tablegen. I thought, incorrectly, that tablegen was an abstraction layer. That is, I could write my tablegen files, build them, and only think about the parts of the generated code that I needed to implement.</p>
</blockquote>
<p>Personally, my experience with tablegen in the backend is akin to this:
for certain issues/problems, if you don't use tablegen, then you'll end up writing more code and spend more time/effort maintaining said code.</p>
<h2 id="grepping-tablegen"><a aria-hidden="true" tabindex="-1" href="#grepping-tablegen"><span class="icon icon-link"></span></a>Grepping tablegen</h2>
<p>With version 14.1.1, Ripgrep provides a way to filter out the file type so often times, you can use this to exclusively search for ripgrep.</p>
<pre><code>rg --type-add 'td:*.td' -ttd "&#x3C;What you want to search here" &#x3C;where you want to search>
</code></pre>
<h1 id="gitbisect"><a aria-hidden="true" tabindex="-1" href="#gitbisect"><span class="icon icon-link"></span></a>gitbisect</h1>
<p>It is quite frustrating that on a big repository, after ~100,000 commits from you and a few thousands contributors, you're asked
to solve a bug that happen on some new releases but not older ones. You say to yourself: "Welp I can't really build the llvm codebase
and run the test case 100,000 times to find the commit that causes the bugs."</p>
<p>Instead, with git-bisect's <code>binary search to find the commit that introduced a bug,</code> you can reduce this down to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mn>100</mn><mo separator="true">,</mo><mn>000</mn><mo stretchy="false">)</mo><mo>=</mo><mn>16.61</mn></mrow><annotation encoding="application/x-tex">log_2(100,000) = 16.61</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">100</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16.61</span></span></span></span></p>
<p>should spawn its own shell so git bisect run is not affected</p>
<p>The rest of this gitbisect section focuses on helping you set up a basic script to automate the bug finding process with gitbisect.</p>
<h1 id="llvm-reduce"><a aria-hidden="true" tabindex="-1" href="#llvm-reduce"><span class="icon icon-link"></span></a>llvm-reduce</h1>
<p>Often, when a bug fails on a big test case, it is imperative to <code>reduce</code> the test case to a smaller one, so that other people can pinpoint exactly where
exactly the bug occurs.</p>
<p>llvm-reduce works on the programmer telling it what test case execution is <code>interesting.</code> And in a unix fashion, if something returns a non-zero code,
it is considered <code>interesting.</code> We can then blah blah blah</p>
<pre><code>--- BEFORE llvm-reduce
define i64 @stest_f64i64(double %x) {
entry:
  %conv = fptosi double %x to i128
  %0 = icmp slt i128 %conv, 9223372036854775807
  %spec.store.select = select i1 %0, i128 %conv, i128 9223372036854775807
  %1 = icmp sgt i128 %spec.store.select, -9223372036854775808
  %spec.store.select7 = select i1 %1, i128 %spec.store.select, i128 -9223372036854775808
  %conv6 = trunc i128 %spec.store.select7 to i64
  ret i64 %conv6
}

--- AFTER llvm-reduce
define &#x3C;2 x i128> @stest_f64i64() {
entry:
  %conv = fptosi &#x3C;2 x double> splat (double 0x7FF8000000000000) to &#x3C;2 x i128>
  ret &#x3C;2 x i128> %conv
}
</code></pre>
<h1 id="rsp_bisectpy"><a aria-hidden="true" tabindex="-1" href="#rsp_bisectpy"><span class="icon icon-link"></span></a>rsp_bisect.py</h1>
<p>rsp file is response file? not sure how relevant this will be or if newcomers will ever use it</p>
<h1 id="llvm-extract"><a aria-hidden="true" tabindex="-1" href="#llvm-extract"><span class="icon icon-link"></span></a>llvm-extract</h1>
<h1 id="reading-skills-experience-or-think-harder"><a aria-hidden="true" tabindex="-1" href="#reading-skills-experience-or-think-harder"><span class="icon icon-link"></span></a>Reading skills, experience, (or think harder)</h1>
<p>Yep yep, you read it right</p>
<p>debugging also comes from lang ref:
for example, if you're creating a new instruction from another instruction, for example: llvm.reduce.and i32 to i1
i</p>
<h1 id="asking-people"><a aria-hidden="true" tabindex="-1" href="#asking-people"><span class="icon icon-link"></span></a>Asking people</h1>
<h1 id="acknowledgments"><a aria-hidden="true" tabindex="-1" href="#acknowledgments"><span class="icon icon-link"></span></a>Acknowledgments</h1>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"[ONGOING] Jasmine and the hitchhiker's guide to LLVM debugging tools"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"8888-08-08"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}]]}]
a:{"metadata":[["$","title","0",{"children":"[ONGOING] Jasmine and the hitchhiker's guide to LLVM debugging tools"}],["$","meta","1",{"name":"description","content":"Jasmine introduces to readers debugging techniques that would benefit their LLVM development."}],["$","link","2",{"rel":"icon","href":"/_next/static/media/pfp5.0daa0f7d.jpeg"}],["$","$L12","3",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
