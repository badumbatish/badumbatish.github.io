1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","880","static/chunks/app/posts/%5Bid%5D/page-8778b7e42f8ceed2.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[7921,["874","static/chunks/874-437a265a67d6cfee.js","177","static/chunks/app/layout-6c77c7f0e287af25.js"],"default"]
7:I[9665,[],"OutletBoundary"]
9:I[4911,[],"AsyncMetadataOutlet"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[8393,[],""]
:HL["/_next/static/media/7385e8d9d3c5518f-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/_next/static/css/f55f51dd62de488d.css","style"]
:HL["/_next/static/css/8a287c41de7a8698.css","style"]
0:{"P":null,"b":"MMU4gQux1CEnrUm_1kJLp","p":"","c":["","posts","what_I_did_for_gsoc_2024"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","what_I_did_for_gsoc_2024","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f55f51dd62de488d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"px-4 py-4","children":["$","body",null,{"className":"__className_d4e0c8 flex flex-col min-h-screen","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"flex justify-center items-center py-4 ","children":["$","h1",null,{"className":"text-4xl font-bold","children":"Jasmine Tang"}]}]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","$L5",null,{}],["$","footer",null,{"className":"footer self-center justify-center gap-2 pt-4 items-center italic ","children":["$","p",null,{"children":"Built by Jasmine with NextJS, TailwindCSS, and a tonnn of loveee :)"}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","what_I_did_for_gsoc_2024","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8a287c41de7a8698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[]],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
12:I[8175,[],"IconMark"]
11:T39c89,<nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#introduction">Introduction</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#main-contribution-aspects">Main contribution aspects</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#issues-and-prs">Issues and PRs</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#issues">Issues</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#prs">PRs</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#gccrs-inline-assembly">GCCRS Inline Assembly</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#purpose">Purpose</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#syntax">Syntax</a><ol class="toc-level toc-level-4"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#grammar">Grammar</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#syntax-example">Syntax example</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#overall-architecture">Overall architecture</a><ol class="toc-level toc-level-4"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#definition">Definition</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#architecture">Architecture</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#related-files">Related files</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#architecture-visualization">Architecture visualization</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#ast">AST</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#parser">Parser</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#ast-to-hir">AST to HIR</a><ol class="toc-level toc-level-4"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#hir-creation">HIR Creation</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#unsafe-gating">Unsafe gating</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#type-checking">Type checking</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#resolution">Resolution</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#tree-generic">TREE (GENERIC)</a><ol class="toc-level toc-level-4"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#overall">Overall</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#anatomy">Anatomy</a><ol class="toc-level toc-level-5"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#tree_list">TREE_LIST</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#string_cst">STRING_CST</a></li><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#asm_expr">ASM_EXPR</a></li></ol></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#tree-usage">TREE USAGE</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#results">Results</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#end-words">End words</a></li></ol></li></ol></li></ol></nav><p>Hi everyone, this article is a requirement for my GSoc Final Submission, linking directly to the submission.</p>
<p>This article will include the summary of my contribution, where you can find all my filed issues and PRs.</p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><span class="icon icon-link"></span></a>Introduction</h2>
<p>This summer I worked on the <a href="https://github.com/Rust-GCC/gccrs" rel="nofollow" target="_blank">gccrs</a> project, a GCC Front-end for Rust.</p>
<p>gccrs is a project to implement the Rust programming languages from scratch in the GCC codebase in order for rust to be able to be compiled to a wider amount of targets. It currently targets the version 1.49 of Rust and is supported by Open Source Security and Embecosm.</p>
<p>By doing this, it helps with a couple things:</p>
<ul>
<li>Targets architecture not available with rustc due to the use of LLVM. (SuperH for example, which powers the Dreamcast!)</li>
<li>Benefit from the existing GCC ecosystem.</li>
<li>Help with acceptance of Rust in the Linux kernel</li>
<li>Help with acceptance of Rust in other fields, where having multiple compilers helps.</li>
<li>Enable building Rust on targets with very old C++ compilers! (Targets with at least GCC version 4.8 (which released March 22, 2013) can build Rust)</li>
</ul>
<h2 id="main-contribution-aspects"><a aria-hidden="true" tabindex="-1" href="#main-contribution-aspects"><span class="icon icon-link"></span></a>Main contribution aspects</h2>
<p>Overall, I contributed in 3 main aspects:</p>
<ul>
<li>
<p><strong>My main project</strong> - Inline Assembly in rust: I programmed the parser, set up the code infrastructure for TREE IR generation in the backend, along with AST, HIR lowering and typechecking.</p>
</li>
<li>
<p><strong>CI/CD</strong>: I helped maintain and improve the CI/CD pipeline. This includes resolving dependency issues in GitHub Actions, adding support for 32 bit CI and glibc compliance CI.
I also created a docker-compose dev environment for MacOS-based contributors, with all libraries and dependency installed; this helps us bypass MacOS's annoying build and link issues.</p>
</li>
<li>
<p><strong>Code maintainance/Bug Fixes/Code Review</strong>: I maintained the code base via issues filed by my mentor and other contributors. I also helped fix some minor bugs in IR lowering and typechecking. I also help review some new, simple PRs for contributors.</p>
</li>
</ul>
<h2 id="issues-and-prs"><a aria-hidden="true" tabindex="-1" href="#issues-and-prs"><span class="icon icon-link"></span></a>Issues and PRs</h2>
<p>Below is all the issues, PRs and commits I've made to the <a href="https://github.com/Rust-GCC/gccrs" rel="nofollow" target="_blank">gccrs</a> repository, up to Aug 22 2024, after producing this I ended up closing some resolved issues that has been silently addressed in some PRs.</p>
<p>The tables are produced via <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gh</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gh" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> cli tool and some <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>I use nvim btw</span></span><button type="button" title="Copy code" aria-label="Copy code" data="I use nvim btw" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> love :)</p>
<h3 id="issues"><a aria-hidden="true" tabindex="-1" href="#issues"><span class="icon icon-link"></span></a>Issues</h3>
<p>Here's a formatted version of all my issues, up to Aug 22 2024, procured via <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gh issue list -A badumbatish --state all</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gh issue list -A badumbatish --state all" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>:</p>
































































































<table><thead><tr><th>Issue Number</th><th>Issue Status</th><th>Issue Title</th><th>Labels</th><th>Filed Date</th></tr></thead><tbody><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3102" rel="nofollow" target="_blank">3102</a></td><td><strong>OPEN</strong></td><td>Set up the rest of HIR pipeline in InlineAsm</td><td></td><td>2024-07-27T03:20:50Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3099" rel="nofollow" target="_blank">3099</a></td><td><strong>OPEN</strong></td><td>parse_expr not stopping on =></td><td></td><td>2024-07-25T19:41:07Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3072" rel="nofollow" target="_blank">3072</a></td><td><strong>OPEN</strong></td><td>asm parser lacking <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>label</span></span><button type="button" title="Copy code" aria-label="Copy code" data="label" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> parse functionality</td><td></td><td>2024-07-01T08:54:12Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3069" rel="nofollow" target="_blank">3069</a></td><td><strong>OPEN</strong></td><td>Make asm parser stores parse result</td><td></td><td>2024-06-25T16:12:44Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3062" rel="nofollow" target="_blank">3062</a></td><td><strong>CLOSED</strong></td><td>Add ExprType::InlineAsm variant to ExprType enum</td><td></td><td>2024-06-24T13:23:55Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3061" rel="nofollow" target="_blank">3061</a></td><td><strong>OPEN</strong></td><td>Typechecking of asm! failed in <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>let _</span></span><button type="button" title="Copy code" aria-label="Copy code" data="let _" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></td><td>bug</td><td>2024-06-24T13:24:07Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3057" rel="nofollow" target="_blank">3057</a></td><td><strong>OPEN</strong></td><td>asm! macro failed to exhaustively parse all of options(), clobber_abis(), and register operands</td><td>bug, expansion</td><td>2024-06-18T13:32:24Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3052" rel="nofollow" target="_blank">3052</a></td><td><strong>OPEN</strong></td><td>Fully incorporate tl::expected into InlineAsm parsing</td><td></td><td>2024-06-14T09:54:17Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3051" rel="nofollow" target="_blank">3051</a></td><td><strong>CLOSED</strong></td><td>Remove unnecessary #include from rust-expr.h</td><td>good-first-pr, cleanup</td><td>2024-07-11T09:23:53Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3050" rel="nofollow" target="_blank">3050</a></td><td><strong>CLOSED</strong></td><td>Safe guard InlineAsm-related structs</td><td></td><td>2024-07-03T09:58:52Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/3048" rel="nofollow" target="_blank">3048</a></td><td><strong>OPEN</strong></td><td>Handle outer attributes properly for inline assembly</td><td></td><td>2024-06-14T09:55:37Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/issues/2937" rel="nofollow" target="_blank">2937</a></td><td><strong>CLOSED</strong></td><td>Docker image and container for Mac</td><td></td><td>2024-05-10T14:53:25Z</td></tr></tbody></table>
<p>The closed/filed rate is 4/8, which is not high. Through out writing the parser and the backend infra, I realized that there are these little issues that's just easier to just fix and not necessary filed. There is also issues that are discussed via <a href="https://gist.github.com/badumbatish/9823719ef359a58b131220d9d79d2aec" rel="nofollow" target="_blank">hackmd notes</a> between me and my mentor that are not necessarily filed via GitHub.</p>
<h3 id="prs"><a aria-hidden="true" tabindex="-1" href="#prs"><span class="icon icon-link"></span></a>PRs</h3>
<p>Here's a formatted version of all my pull requests, up to Aug 22 2024, procured via <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gh pr list -A badumbatish --state all</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gh pr list -A badumbatish --state all" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>:</p>



























































































































































<table><thead><tr><th>PR Number</th><th>PR Status</th><th>PR Title</th><th>Filed Date</th></tr></thead><tbody><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3133" rel="nofollow" target="_blank">3133</a></td><td><strong>MERGED</strong></td><td>Fix the disorder struct and class in inline asm</td><td>2024-08-20T07:41:34Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3119" rel="nofollow" target="_blank">3119</a></td><td><strong>OPEN</strong></td><td>Add running cicd 32bit</td><td>2024-08-04T19:47:37Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3109" rel="nofollow" target="_blank">3109</a></td><td><strong>MERGED</strong></td><td>Inline asm resolve expr</td><td>2024-07-31T03:41:32Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3103" rel="nofollow" target="_blank">3103</a></td><td><strong>MERGED</strong></td><td>Inline asm hir pipeline</td><td>2024-07-27T08:22:57Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3098" rel="nofollow" target="_blank">3098</a></td><td><strong>MERGED</strong></td><td>Fix the parser's operand and flags storage</td><td>2024-07-25T16:38:11Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3093" rel="nofollow" target="_blank">3093</a></td><td><strong>MERGED</strong></td><td>Change assertion of asm operand constructor</td><td>2024-07-21T22:46:28Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3090" rel="nofollow" target="_blank">3090</a></td><td><strong>MERGED</strong></td><td>Added options for ParseMode</td><td>2024-07-20T07:48:51Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3081" rel="nofollow" target="_blank">3081</a></td><td><strong>MERGED</strong></td><td>Pin node16 by allowing old version</td><td>2024-07-10T02:32:08Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3074" rel="nofollow" target="_blank">3074</a></td><td><strong>MERGED</strong></td><td>Safe-guard InlineAsm structs</td><td>2024-07-01T00:43:59Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3073" rel="nofollow" target="_blank">3073</a></td><td><strong>MERGED</strong></td><td>Store parse result of parse_format_string(s)</td><td>2024-07-01T00:24:42Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3063" rel="nofollow" target="_blank">3063</a></td><td><strong>MERGED</strong></td><td>Added ExprType::InlineAsm</td><td>2024-06-23T18:06:02Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3060" rel="nofollow" target="_blank">3060</a></td><td><strong>DRAFT</strong></td><td>Asm generic il codegen</td><td>2024-06-23T14:11:44Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3059" rel="nofollow" target="_blank">3059</a></td><td><strong>MERGED</strong></td><td>Add test case for using asm! outside of unsafe </td><td>2024-06-22T06:40:27Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3053" rel="nofollow" target="_blank">3053</a></td><td><strong>MERGED</strong></td><td>incorporate tl::expected into InlineAsm parsing</td><td>2024-06-14T06:08:01Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3011" rel="nofollow" target="_blank">3011</a></td><td><strong>MERGED</strong></td><td>Remove cstddef header from rust-fmt</td><td>2024-05-19T03:03:05Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/3002" rel="nofollow" target="_blank">3002</a></td><td><strong>MERGED</strong></td><td>Make gccrs recognize negative_impls</td><td>2024-05-15T22:06:45Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2982" rel="nofollow" target="_blank">2982</a></td><td><strong>MERGED</strong></td><td>Inline asm</td><td>2024-05-08T19:41:27Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2981" rel="nofollow" target="_blank">2981</a></td><td><strong>OPEN</strong></td><td>Cleanup macro invoc</td><td>2024-05-08T17:47:46Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2980" rel="nofollow" target="_blank">2980</a></td><td><strong>MERGED</strong></td><td>Fix all tests in execute to be \r\n</td><td>2024-05-08T06:47:12Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2941" rel="nofollow" target="_blank">2941</a></td><td><strong>MERGED</strong></td><td>Add an alternative solution on MacOS</td><td>2024-04-05T03:10:57Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2911" rel="nofollow" target="_blank">2911</a></td><td><strong>MERGED</strong></td><td>Store visibility properly in ExternalTypeItem: Fixes #2897</td><td>2024-03-09T22:46:59Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2895" rel="nofollow" target="_blank">2895</a></td><td><strong>MERGED</strong></td><td>Add error emitting when we can't resolve id expr</td><td>2024-03-01T10:40:34Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2874" rel="nofollow" target="_blank">2874</a></td><td><strong>MERGED</strong></td><td>First stab at issue 2855 by splitting the two maps</td><td>2024-02-25T21:13:02Z</td></tr><tr><td><a href="https://github.com/Rust-GCC/gccrs/pull/2871" rel="nofollow" target="_blank">2871</a></td><td><strong>MERGED</strong></td><td>Fix FixMe in changing return type of builtin_macro_from_string() from BuiltinMacro to tl::optional/<div></div></td><td>2024-02-23T21:22:58Z</td></tr></tbody></table>
<p>The merged/filed rate is 22/25. Half of the PRs are easy to fix / fixable within a short amount of time (Code maintanence aspect). The other half is medium in difficulty, related to my summer project (Project aspect).</p>
<h1 id="gccrs-inline-assembly"><a aria-hidden="true" tabindex="-1" href="#gccrs-inline-assembly"><span class="icon icon-link"></span></a>GCCRS Inline Assembly</h1>
<p>Alright, let's try to understand what I did this summer in greater detail.</p>
<p>This write up will try to avoid lower level, implementation-based details but will let you walk away knowing what I, <a href="https://badumbatish.github.io/" rel="nofollow" target="_blank">badumbatish</a> did this summer :)</p>
<p>Although I won't post much code, I'll still provide links to my PRs for interested readers. Inspirations  includes contributors from the rust codebase and gccrs codebase. More specifically, <a href="https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/asm.rs" rel="nofollow" target="_blank">asm.rs</a> from rustc, Arthur, Pierre-Emmanuel and Mahad from gccrs.</p>
<h2 id="purpose"><a aria-hidden="true" tabindex="-1" href="#purpose"><span class="icon icon-link"></span></a>Purpose</h2>
<p>Assembly are often used by programmers as a precise instrument in case that compiler's high level constructs are too coarse for the programmers' intent. With the advent of inline  assembly, you can do this without having to create a seperate assembly file, maintaining the stackframe, register invariants, juggling different platforms and different calling conventions by yourself, etc...</p>
<p>The purpose of my project is to provide support for inline assembly in gccrs. With respect to Rust's memory safety guarantees as well as the context of assembly languages usages in today's modern era, the project aims to alleviate the complexity from the programmmers while providing precautions and safeguards with unsafe blocks requirements and higher level constructs such as register operands, compared to raw hardware registers.</p>
<h2 id="syntax"><a aria-hidden="true" tabindex="-1" href="#syntax"><span class="icon icon-link"></span></a>Syntax</h2>
<p>In this section we'll take a look at the syntax of inline assembly, as well as dissecting some examples.</p>
<h3 id="grammar"><a aria-hidden="true" tabindex="-1" href="#grammar"><span class="icon icon-link"></span></a>Grammar</h3>
<p>The syntax for inline assembly is quite simple. This is taken from the <a href="https://doc.rust-lang.org/reference/inline-assembly.html" rel="nofollow" target="_blank">Rust Reference website</a> :</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="plaintext" data-theme="github-dark-dimmed"><code data-language="plaintext" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span>format_string := STRING_LITERAL / RAW_STRING_LITERAL</span></span>
<span data-line=""><span>dir_spec := "in" / "out" / "lateout" / "inout" / "inlateout"</span></span>
<span data-line=""><span>reg_spec := &#x3C;register class> / "\"" &#x3C;explicit register> "\""</span></span>
<span data-line=""><span>operand_expr := expr / "_" / expr "=>" expr / expr "=>" "_"</span></span>
<span data-line=""><span>reg_operand := [ident "="] dir_spec "(" reg_spec ")" operand_expr</span></span>
<span data-line=""><span>clobber_abi := "clobber_abi(" &#x3C;abi> *("," &#x3C;abi>) [","] ")"</span></span>
<span data-line=""><span>option := "pure" / "nomem" / "readonly" / "preserves_flags" / "noreturn" / "nostack" / "att_syntax" / "raw"</span></span>
<span data-line=""><span>options := "options(" option *("," option) [","] ")"</span></span>
<span data-line=""><span>operand := reg_operand / clobber_abi / options</span></span>
<span data-line=""><span>asm := "asm!(" format_string *("," format_string) *("," operand) [","] ")"</span></span>
<span data-line=""><span>global_asm := "global_asm!(" format_string *("," format_string) *("," operand) [","] ")"</span></span><button type="button" title="Copy code" aria-label="Copy code" data="format_string := STRING_LITERAL / RAW_STRING_LITERAL
dir_spec := &#x22;in&#x22; / &#x22;out&#x22; / &#x22;lateout&#x22; / &#x22;inout&#x22; / &#x22;inlateout&#x22;
reg_spec := <register class> / &#x22;\&#x22;&#x22; <explicit register> &#x22;\&#x22;&#x22;
operand_expr := expr / &#x22;_&#x22; / expr &#x22;=>&#x22; expr / expr &#x22;=>&#x22; &#x22;_&#x22;
reg_operand := [ident &#x22;=&#x22;] dir_spec &#x22;(&#x22; reg_spec &#x22;)&#x22; operand_expr
clobber_abi := &#x22;clobber_abi(&#x22; <abi> *(&#x22;,&#x22; <abi>) [&#x22;,&#x22;] &#x22;)&#x22;
option := &#x22;pure&#x22; / &#x22;nomem&#x22; / &#x22;readonly&#x22; / &#x22;preserves_flags&#x22; / &#x22;noreturn&#x22; / &#x22;nostack&#x22; / &#x22;att_syntax&#x22; / &#x22;raw&#x22;
options := &#x22;options(&#x22; option *(&#x22;,&#x22; option) [&#x22;,&#x22;] &#x22;)&#x22;
operand := reg_operand / clobber_abi / options
asm := &#x22;asm!(&#x22; format_string *(&#x22;,&#x22; format_string) *(&#x22;,&#x22; operand) [&#x22;,&#x22;] &#x22;)&#x22;
global_asm := &#x22;global_asm!(&#x22; format_string *(&#x22;,&#x22; format_string) *(&#x22;,&#x22; operand) [&#x22;,&#x22;] &#x22;)&#x22;" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>The topmost level, or the start of the parse rule is either <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>asm</span></span><button type="button" title="Copy code" aria-label="Copy code" data="asm" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> or <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>global_asm</span></span><button type="button" title="Copy code" aria-label="Copy code" data="global_asm" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</p>
<p>The inline assembly code is represented by <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>format_string</span></span><button type="button" title="Copy code" aria-label="Copy code" data="format_string" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>. The other aspect is <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>operand</span></span><button type="button" title="Copy code" aria-label="Copy code" data="operand" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, which includes <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>reg_operand</span></span><button type="button" title="Copy code" aria-label="Copy code" data="reg_operand" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>clobber_abi</span></span><button type="button" title="Copy code" aria-label="Copy code" data="clobber_abi" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>options</span></span><button type="button" title="Copy code" aria-label="Copy code" data="options" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</p>
<p>More information about different types of operand can be referred to from <a href="https://doc.rust-lang.org/reference/inline-assembly.html" rel="nofollow" target="_blank">the reference</a>.</p>
<p>Keep in mind that the way we see this division of the grammar is how we'll construct our AST subsequently, our parser.</p>
<h3 id="syntax-example"><a aria-hidden="true" tabindex="-1" href="#syntax-example"><span class="icon icon-link"></span></a>Syntax example</h3>
<p>Let's look at some inline assembly examples pulled from the <a href="https://doc.rust-lang.org/rust-by-example/unsafe/asm.html" rel="nofollow" target="_blank">Rust by example website</a>.</p>
<ul>
<li>This is the simplest form, only including a no-op instruction</li>
</ul>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark-dimmed"><code data-language="rust" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">use</span><span style="color:#F69D50"> std</span><span style="color:#F47067">::</span><span style="color:#F69D50">arch</span><span style="color:#F47067">::</span><span style="color:#ADBAC7">asm;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">unsafe</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#DCBDFB">    asm!</span><span style="color:#6bc46d">(</span><span style="color:#96D0FF">"nop"</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="use std::arch::asm;

unsafe {
    asm!(&#x22;nop&#x22;);
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<ul>
<li>Of course, more complex (non-simple) form of inline assembly requires some extra functionality:</li>
</ul>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark-dimmed"><code data-language="rust" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">use</span><span style="color:#F69D50"> std</span><span style="color:#F47067">::</span><span style="color:#F69D50">arch</span><span style="color:#F47067">::</span><span style="color:#ADBAC7">asm;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">let</span><span style="color:#ADBAC7"> x</span><span style="color:#F47067">:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">unsafe</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#DCBDFB">    asm!</span><span style="color:#6bc46d">(</span><span style="color:#96D0FF">"mov {}, 5"</span><span style="color:#ADBAC7">, </span><span style="color:#DCBDFB">out</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">reg</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> x</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""><span style="color:#DCBDFB">assert_eq!</span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">x, </span><span style="color:#6CB6FF">5</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7">;</span></span><button type="button" title="Copy code" aria-label="Copy code" data="use std::arch::asm;

let x: u64;
unsafe {
    asm!(&#x22;mov {}, 5&#x22;, out(reg) x);
}
assert_eq!(x, 5);" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>This requires the operand functionality, more specifically the reg_operand category. In simple terms, the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>{}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="{}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> in the format string (template string) (designated by the double quote symbol) refers to the variable x. The out(reg) asks the compiler to substitute the  by the register used to store x and to assume the inline assembly will only write to this register and not expect any particular initial value. On the ARM platform architecture, in the raw assembly, the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>{}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="{}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> in the formatted string would be replaced with a  register allocated to <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>x</span></span><button type="button" title="Copy code" aria-label="Copy code" data="x" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, such as the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>x0</span></span><button type="button" title="Copy code" aria-label="Copy code" data="x0" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> register.</p>
<p>An as a demonstrate, in the following code, <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>move {}, 5</span></span><button type="button" title="Copy code" aria-label="Copy code" data="move {}, 5" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> is transformed into <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>mov x0, 5</span></span><button type="button" title="Copy code" aria-label="Copy code" data="mov x0, 5" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="asm" data-theme="github-dark-dimmed"><code data-language="asm" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">    .cfi_def_cfa_offset </span><span style="color:#6CB6FF">32</span></span>
<span data-line=""><span style="color:#ADBAC7">    .cfi_offset </span><span style="color:#6CB6FF">29</span><span style="color:#ADBAC7">, -</span><span style="color:#6CB6FF">32</span></span>
<span data-line=""><span style="color:#ADBAC7">    .cfi_offset </span><span style="color:#6CB6FF">30</span><span style="color:#ADBAC7">, -</span><span style="color:#6CB6FF">24</span></span>
<span data-line=""><span style="color:#ADBAC7">    ...</span></span>
<span data-line=""><span style="color:#ADBAC7">#APP</span></span>
<span data-line=""><span style="color:#ADBAC7">// </span><span style="color:#6CB6FF">6</span><span style="color:#ADBAC7"> "asm_mov.rs" </span><span style="color:#6CB6FF">1</span></span>
<span data-line=""><span style="color:#F47067">    mov</span><span style="color:#ADBAC7"> x0, </span><span style="color:#6CB6FF">5</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">// </span><span style="color:#6CB6FF">0</span><span style="color:#ADBAC7"> "" </span><span style="color:#6CB6FF">2</span></span>
<span data-line=""><span style="color:#ADBAC7">#NO_APP</span></span>
<span data-line=""><span style="color:#ADBAC7">    ...</span></span><button type="button" title="Copy code" aria-label="Copy code" data="    .cfi_def_cfa_offset 32
    .cfi_offset 29, -32
    .cfi_offset 30, -24
    ...
#APP
// 6 &#x22;asm_mov.rs&#x22; 1
    mov x0, 5

// 0 &#x22;&#x22; 2
#NO_APP
    ..." class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h2 id="overall-architecture"><a aria-hidden="true" tabindex="-1" href="#overall-architecture"><span class="icon icon-link"></span></a>Overall architecture</h2>
<p>In this section we provide common compiler norms, discuss the overall architecture of the project as well as some of the most relevant files to the project.</p>
<p>The end of this section provides a high level graph for readers to visualize the architecture.</p>
<h3 id="definition"><a aria-hidden="true" tabindex="-1" href="#definition"><span class="icon icon-link"></span></a>Definition</h3>
<p>Before giving an overview of the architecture of the project, it's necessary to give context to common compiler norms:</p>
<ul>
<li>Type checking: The process of ensuring that variables and expressions have types that align with the expected types (explicitly or implicitly) defined in the code, preventing type errors.</li>
<li>Name resolution: The process of matching names (such as variables, functions, and types) in the code with their corresponding declarations to ensure correct scoping and accessibility.</li>
<li>Unsafe gating: The mechanism that restricts certain operations (e.g., raw pointer casting, inline assembly) to unsafe blocks, indicating that the programmer takes responsibility for upholding safety guarantees.</li>
<li>AST: Stands for Abstract syntax tree and is used to represent a program or a code snippet. Usually in a compiler, this data structure is the product of a parser. The compiler can then lower this data structure into a different data structure called HIR, which will be defined in the next sentence.</li>
<li>HIR: High Level Intermediate Representation. After AST, the compiler lowers the AST into a different representation. In gccrs, this is where different validations such as type checking, name resolution and unsafe gating happens. The compiler then lower this IR into what's known as GENERIC IL</li>
<li>TREE (GENERIC IL): GENERIC Intermediate Language. gcc's language-independent way of representing different constructs in trees.</li>
<li>GIMPLE: (From gcc:) is a three-address representation derived from GENERIC by breaking down GENERIC expressions into tuples of no more than 3 operands (with some exceptions like function calls).</li>
<li>GCC Backend: where gcc starts to generate archiecture-dependent code.</li>
</ul>
<h3 id="architecture"><a aria-hidden="true" tabindex="-1" href="#architecture"><span class="icon icon-link"></span></a>Architecture</h3>
<p>I haven't talked about how we should handle this. Obviously the plan is to have the compiler recognize the syntax so a parser is required, but what happens after that?</p>
<p>Well, like our cousin (or sibling?) rustc, the gccrs compiler itself has the AST, and then HIR. After that, gccrs converts its HIR into gcc's TREE (GENERIC IL) format. At this stage, gcc handles the conversion from inline assembly tree to gimple and then eventually raw architecture-dependent assembly code via gcc's backend.</p>
<p>We need to also set up other stuff such as inline assembly validation, type checking, name resolution, etc etc. This will be mention in passing as it is relevant to Rust's safety feature.</p>
<h3 id="related-files"><a aria-hidden="true" tabindex="-1" href="#related-files"><span class="icon icon-link"></span></a>Related files</h3>
<p>The related files for this issue includes</p>
<ul>
<li><span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/expand/rust-macrobuiltins-asm.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/expand/rust-macrobuiltins-asm.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>: Where the parsing of an <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>asm!()</span></span><button type="button" title="Copy code" aria-label="Copy code" data="asm!()" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> happens.</li>
<li><span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/ast/rust-expr.h</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/ast/rust-expr.h" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>: Where the ast of an inline asm is defined.</li>
<li><span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/hir/tree/rust-hir-expr.h</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/hir/tree/rust-hir-expr.h" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>: Where the HIR (high level ir) of an inline asm is defined.</li>
<li><span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/backend/rust-compile-asm.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/backend/rust-compile-asm.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>: where the backend of inline asm starts processing.</li>
</ul>
<h3 id="architecture-visualization"><a aria-hidden="true" tabindex="-1" href="#architecture-visualization"><span class="icon icon-link"></span></a>Architecture visualization</h3>
<p>The picture below depicts the project's pipeline.
<img src="/blogs/mermaid_gsoc_arch1.svg" alt="mermaid_gsoc_arch"></p>
<h2 id="ast"><a aria-hidden="true" tabindex="-1" href="#ast"><span class="icon icon-link"></span></a>AST</h2>
<p>The AST follows the structure that the syntax provides.</p>
<p>At the end of PR <a href="https://github.com/Rust-GCC/gccrs/pull/3060" rel="nofollow" target="_blank">3060</a>, it takes its structure from <a href="https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/asm.rs" rel="nofollow" target="_blank">asm.rs</a>. It inherits from the ExprWithoutBlock, which inherits from Expr, indicating that an asm! call is an expr.</p>
<p>Here, I give the high level structure of the AST related to inline assembly. In the gccrs codebase, the AST are represented with classes and structs.</p>
<ul>
<li>InlineAsm: this class inherits from ExprWithoutBlock, and contains containers for templated strings, operands, named arguments, register arguments, clobber abi, and options.</li>
<li>TupleTemplateStr: stands for a templated string where we store a location as well as the internet string</li>
<li>InlineAsmOperand: represents an operand in inline assembly, which can be a register operand (class InlineAsmRegOrRegClass) or some non-register operands such as a Sym or a Label.</li>
</ul>
<p>By having a close mapping between the three things: Syntax, AST, and parsing, we lower our mental capacity in implementing them, maintaining a clear mental model if ever in need of debugging.</p>
<h2 id="parser"><a aria-hidden="true" tabindex="-1" href="#parser"><span class="icon icon-link"></span></a>Parser</h2>
<p>Nice, now let's talk about the parser :)</p>
<p>We'll be writing a simple recursive descent parser as described by our syntax section.</p>
<p>As referenced above in the syntax section, the parser consists of 4 levels, 0 to 3, maintaining a clear and simple mapping between the parser and the syntax:</p>
<ul>
<li>The first level (0), shows the entrance of the parser.</li>
<li>The second level (1) describes the main loop of the parser, where we repeatedly parse all the formatted strings first, then operands then perform AST validation.</li>
<li>The third and fourth level goes into the subcategory of each aspect of the second level and so on: parsing formatted strings means repeatedly parsing <em>a</em> formatted string and parsing options means repeatedly parsing <em>an</em> option, etc etc.</li>
</ul>
<p>The diagram below shows the totality of the parser architecture, where the two greenish block in level 0 represents the starting point and the ending point of the parser.
<img src="https://hackmd.io/_uploads/r1tIddrhR.svg" alt="Untitled diagram-2024-09-04-060350"></p>
<p>Interested readers can look into the master branch, in the file <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/expand/rust-macro-builtins-asm.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/expand/rust-macro-builtins-asm.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> for the implementation detail of the parser.</p>
<h2 id="ast-to-hir"><a aria-hidden="true" tabindex="-1" href="#ast-to-hir"><span class="icon icon-link"></span></a>AST to HIR</h2>
<p>After we have gotten our AST, the next step is lowering it into HIR.</p>
<p>Since the inline assembly ASTs doesn't undergo much change in structure from AST to HIR, the HIRs representation inherits almost everything from the ASTs structure.</p>
<p>Despite similarity in structure, the HIR lowering is a necessary step in the pipeline where we get to inherit all of gccrs' necessary name resolution, unsafe gating and type checking.</p>
<h3 id="hir-creation"><a aria-hidden="true" tabindex="-1" href="#hir-creation"><span class="icon icon-link"></span></a>HIR Creation</h3>
<p>There must be an automatic way to do this. After all, the call <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>asm!</span></span><button type="button" title="Copy code" aria-label="Copy code" data="asm!" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> will appear everywhere, maybe in a block, maybe in another AST; how do we make sure that we can reach it and lower it correctly?</p>
<p>The answer is the visitor pattern, here are <a href="https://en.wikipedia.org/wiki/Visitor_pattern" rel="nofollow" target="_blank">some</a> of <a href="https://refactoring.guru/design-patterns/visitor" rel="nofollow" target="_blank">the</a> references to <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" rel="nofollow" target="_blank">look into</a> if you're new to this pattern.</p>
<p>In short: The visitor pattern separate algorithms from the objects which they operate on.</p>
<p>In my opinion, this is where the visitor pattern shines the brightest: you only have to worry about your part. Let's get into the nitty gritty.</p>
<p>In the gccrs codebase, more specifically, the visitor class responsible for lowering AST to HIR is of the name <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>ASTLowering*</span></span><button type="button" title="Copy code" aria-label="Copy code" data="ASTLowering*" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>.</p>
<p>The most general AST lowering class is <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>ASTLoweringBase</span></span><button type="button" title="Copy code" aria-label="Copy code" data="ASTLoweringBase" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> where all other AST lowering class inherits from to overload as needed.</p>
<p>Since our AST inherits from ExprWithoutBlock, which is a type of Expr, we implement our lowering from <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>ASTLoweringExpr</span></span><button type="button" title="Copy code" aria-label="Copy code" data="ASTLoweringExpr" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>. The following code block highlights the fact that we need to lower all of AST::Expr in our AST::InlineAsm, primarily in our AST::InlineAsmOperand; I show the pattern for the first two lowering of AST::InlineAsmOperand, as well as the method to create the HIR::InlineAsm.</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsmOperand</span></span>
<span data-line=""><span style="color:#DCBDFB">translate_operand_in</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F47067">const</span><span style="color:#F69D50"> AST</span><span style="color:#ADBAC7">::InlineAsmOperand </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">operand</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> in_value </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> operand.</span><span style="color:#DCBDFB">get_in</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  struct</span><span style="color:#F69D50"> HIR</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">InlineAsmOperand</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">In</span><span style="color:#ADBAC7"> in </span><span style="color:#6bc46d">(</span></span>
<span data-line=""><span style="color:#ADBAC7">    in_value.reg,</span></span>
<span data-line=""><span style="color:#ADBAC7">    std::</span><span style="color:#F69D50">unique_ptr</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Expr</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">ASTLoweringExpr::</span><span style="color:#F69D50">translate</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">*in_value.expr.get </span><span style="color:#fc8dc7">(</span><span style="color:#fc8dc7">)</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> in;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsmOperand</span></span>
<span data-line=""><span style="color:#DCBDFB">translate_operand_out</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F47067">const</span><span style="color:#F69D50"> AST</span><span style="color:#ADBAC7">::InlineAsmOperand </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">operand</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> out_value </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> operand.</span><span style="color:#DCBDFB">get_out</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  struct</span><span style="color:#F69D50"> HIR</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">InlineAsmOperand</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">Out</span><span style="color:#ADBAC7"> out </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">out_value.reg, out_value.late,</span></span>
<span data-line=""><span style="color:#ADBAC7">					 std::</span><span style="color:#F69D50">unique_ptr</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Expr</span><span style="color:#ADBAC7">></span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span></span>
<span data-line=""><span style="color:#ADBAC7">					   ASTLoweringExpr::</span><span style="color:#F69D50">translate</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span></span>
<span data-line=""><span style="color:#ADBAC7">					     *out_value.expr.get </span><span style="color:#fc8dc7">(</span><span style="color:#fc8dc7">)</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> out;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""><span style="color:#768390">// [...]</span></span>
<span data-line=""><span style="color:#768390">// We omit translate_operand_inout, translate_operand_split_in_out,</span></span>
<span data-line=""><span style="color:#768390">// translate_operand_const, translate_operand_sym,</span></span>
<span data-line=""><span style="color:#768390">// translate_operand_label for clarity</span></span>
<span data-line=""><span style="color:#DCBDFB">from_operand</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F47067">const</span><span style="color:#F69D50"> AST</span><span style="color:#ADBAC7">::InlineAsmOperand </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">operand</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  using</span><span style="color:#F69D50"> RegisterType</span><span style="color:#F47067"> =</span><span style="color:#F69D50"> AST</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">InlineAsmOperand</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">RegisterType</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> type </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> operand.</span><span style="color:#DCBDFB">get_register_type</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  switch</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">type</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::In:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_in</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::Out:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_out</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::InOut:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_inout</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::SplitInOut:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_split_in_out</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::Const:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_const</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::Sym:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_sym</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    case</span><span style="color:#F69D50"> RegisterType</span><span style="color:#ADBAC7">::Label:</span></span>
<span data-line=""><span style="color:#F47067">      return</span><span style="color:#DCBDFB"> translate_operand_label</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    default</span><span style="color:#ADBAC7">:</span></span>
<span data-line=""><span style="color:#DCBDFB">      rust_unreachable</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""><span style="color:#F47067">void</span></span>
<span data-line=""><span style="color:#F69D50">ASTLoweringExpr</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">visit</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">AST</span><span style="color:#ADBAC7">::InlineAsm </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> crate_num </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> mappings.</span><span style="color:#DCBDFB">get_current_crate</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F69D50">  Analysis</span><span style="color:#ADBAC7">::NodeMapping </span><span style="color:#DCBDFB">mapping</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">crate_num, expr.</span><span style="color:#DCBDFB">get_node_id</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#ADBAC7">				 mappings.</span><span style="color:#DCBDFB">get_next_hir_id</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">crate_num</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#ADBAC7">				 mappings.</span><span style="color:#DCBDFB">get_next_localdef_id</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">crate_num</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F69D50">  std</span><span style="color:#ADBAC7">::vector</span><span style="color:#F47067">&#x3C;</span><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsmOperand</span><span style="color:#F47067">></span><span style="color:#ADBAC7"> hir_operands;</span></span>
<span data-line=""><span style="color:#F47067">  const</span><span style="color:#F69D50"> std</span><span style="color:#ADBAC7">::vector</span><span style="color:#F47067">&#x3C;</span><span style="color:#F69D50">AST</span><span style="color:#ADBAC7">::InlineAsmOperand</span><span style="color:#F47067">></span><span style="color:#F47067"> &#x26;</span><span style="color:#ADBAC7">ast_operands </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> expr.</span><span style="color:#DCBDFB">get_operands</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  for</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F47067">auto</span><span style="color:#F47067"> &#x26;</span><span style="color:#ADBAC7">operand : ast_operands</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">      hir_operands.</span><span style="color:#DCBDFB">push_back</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#DCBDFB">from_operand</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">operand</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">  translated</span></span>
<span data-line=""><span style="color:#F47067">    =</span><span style="color:#F47067"> new</span><span style="color:#F69D50"> HIR</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">InlineAsm</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr.</span><span style="color:#DCBDFB">get_locus</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, expr.is_global_asm,</span></span>
<span data-line=""><span style="color:#ADBAC7">			  expr.</span><span style="color:#DCBDFB">get_template_</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, expr.</span><span style="color:#DCBDFB">get_template_strs</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#ADBAC7">			  hir_operands, expr.</span><span style="color:#DCBDFB">get_clobber_abi</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#ADBAC7">			  expr.</span><span style="color:#DCBDFB">get_options</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, mapping</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""> </span>
<span data-line=""> </span><button type="button" title="Copy code" aria-label="Copy code" data="HIR::InlineAsmOperand
translate_operand_in (const AST::InlineAsmOperand &#x26;operand)
{
  auto in_value = operand.get_in ();

  struct HIR::InlineAsmOperand::In in (
    in_value.reg,
    std::unique_ptr<Expr> (ASTLoweringExpr::translate (*in_value.expr.get ())));
  return in;
}

HIR::InlineAsmOperand
translate_operand_out (const AST::InlineAsmOperand &#x26;operand)
{
  auto out_value = operand.get_out ();
  struct HIR::InlineAsmOperand::Out out (out_value.reg, out_value.late,
					 std::unique_ptr<Expr> (
					   ASTLoweringExpr::translate (
					     *out_value.expr.get ())));
  return out;
}
// [...]
// We omit translate_operand_inout, translate_operand_split_in_out,
// translate_operand_const, translate_operand_sym,
// translate_operand_label for clarity
from_operand (const AST::InlineAsmOperand &#x26;operand)
{
  using RegisterType = AST::InlineAsmOperand::RegisterType;
  auto type = operand.get_register_type ();

  switch (type)
    {
    case RegisterType::In:
      return translate_operand_in (operand);
    case RegisterType::Out:
      return translate_operand_out (operand);
    case RegisterType::InOut:
      return translate_operand_inout (operand);
    case RegisterType::SplitInOut:
      return translate_operand_split_in_out (operand);
    case RegisterType::Const:
      return translate_operand_const (operand);
    case RegisterType::Sym:
      return translate_operand_sym (operand);
    case RegisterType::Label:
      return translate_operand_label (operand);
    default:
      rust_unreachable ();
    }
}
void
ASTLoweringExpr::visit (AST::InlineAsm &#x26;expr)
{
  auto crate_num = mappings.get_current_crate ();
  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),
				 mappings.get_next_hir_id (crate_num),
				 mappings.get_next_localdef_id (crate_num));

  std::vector<HIR::InlineAsmOperand> hir_operands;
  const std::vector<AST::InlineAsmOperand> &#x26;ast_operands = expr.get_operands ();

  for (auto &#x26;operand : ast_operands)
      hir_operands.push_back (from_operand (operand));


  translated
    = new HIR::InlineAsm (expr.get_locus (), expr.is_global_asm,
			  expr.get_template_ (), expr.get_template_strs (),
			  hir_operands, expr.get_clobber_abi (),
			  expr.get_options (), mapping);
}

" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h3 id="unsafe-gating"><a aria-hidden="true" tabindex="-1" href="#unsafe-gating"><span class="icon icon-link"></span></a>Unsafe gating</h3>
<p>Since <span data-rehype-pretty-code-figure=""><code data-language="rust" data-theme="github-dark-dimmed"><span data-line=""><span style="color:#DCBDFB">asm!</span></span><button type="button" title="Copy code" aria-label="Copy code" data="asm!" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> is platform dependent and is inherently unsafe, i.e "you would get a <a href="https://en.wikipedia.org/wiki/Segmentation_fault" rel="nofollow" target="_blank">segmentation fault</a> with no probable stacktrace whatsoever", rust requires asm! to be in an unsafe block.</p>
<p>In the gccrs codebase, this <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>unsafe gating</span></span><button type="button" title="Copy code" aria-label="Copy code" data="unsafe gating" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> is handled via <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/checks/rust-unsafe-checker.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/checks/rust-unsafe-checker.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, again, employing the <a href="https://stackoverflow.com/questions/6762256/how-does-double-dispatch-work-in-visitor-pattern" rel="nofollow" target="_blank">double dispatch</a> functionality of the visitor pattern.</p>
<p>In our implementation, the unsafe checker maintains a stack of contexts named <span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed"><span data-line=""><span style="color:#ADBAC7">unsafe_context</span></span><button type="button" title="Copy code" aria-label="Copy code" data="unsafe_context" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> with a convenient boolean function <span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed"><span data-line=""><span style="color:#DCBDFB">is_in_context</span><span style="color:#6cb6ff">(</span><span style="color:#6cb6ff">)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="is_in_context()" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>. At the time of our visit, we check if it is an unsafe context or not.</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">void</span></span>
<span data-line=""><span style="color:#F69D50">UnsafeChecker</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">visit</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">InlineAsm </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  if</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">unsafe_context.</span><span style="color:#DCBDFB">is_in_context</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#F47067">    return</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#DCBDFB">  rust_error_at</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span></span>
<span data-line=""><span style="color:#ADBAC7">    expr.</span><span style="color:#DCBDFB">get_locus</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, </span><span style="color:#F69D50">ErrorCode</span><span style="color:#ADBAC7">::E0133,</span></span>
<span data-line=""><span style="color:#96D0FF">    "use of inline assembly is unsafe and requires unsafe function or block"</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="void
UnsafeChecker::visit (InlineAsm &#x26;expr)
{
  if (unsafe_context.is_in_context ())
    return;

  rust_error_at (
    expr.get_locus (), ErrorCode::E0133,
    &#x22;use of inline assembly is unsafe and requires unsafe function or block&#x22;);
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<blockquote>
<p>But Jas, why we wouldn't want the UnsafeChecker to just maintain a boolean <span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed"><span data-line=""><span style="color:#ADBAC7">is_unsafe</span></span><button type="button" title="Copy code" aria-label="Copy code" data="is_unsafe" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, and once UnsafeChecker visit an unsafe block, we set the boolean <span data-rehype-pretty-code-figure=""><code data-language="cpp" data-theme="github-dark-dimmed"><span data-line=""><span style="color:#ADBAC7">is_unsafe</span></span><button type="button" title="Copy code" aria-label="Copy code" data="is_unsafe" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> to true and consequently false after the UnsafeChecker finishes visiting?</p>
</blockquote>
<p>This won't work if we are traversing an AST where we have nested unsafe block, thus a <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>template &#x3C;typename T> class StackedContexts</span></span><button type="button" title="Copy code" aria-label="Copy code" data="template <typename T> class StackedContexts" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> is needed. Let's examine an example where a single boolean failed and why we would need to use a stack.</p>
<p>In this example, there is only 1 unsafe context; the boolean implementation satisfies the unsafe requirement.</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="diff" data-theme="github-dark-dimmed"><code data-language="diff" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">let a = 15;</span></span>
<span data-line=""><span style="color:#ADBAC7">unsafe </span><span style="color:#6cb6ff">{</span><span style="color:#ADBAC7"> // we set the boolean to true</span></span>
<span data-line=""><span style="color:#ADBAC7">      // Now unsafe operations are allowed!</span></span>
<span data-line=""><span style="color:#ADBAC7">      let b = *</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">&#x26;a as *const i32</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">      let c = std::mem::transmute</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ADBAC7">i32, f32</span><span style="color:#ADBAC7">></span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">b</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span><span style="color:#ADBAC7"> // we set it to false</span></span>
<span data-line=""><span style="color:#ADBAC7">// Yay me!!!</span></span><button type="button" title="Copy code" aria-label="Copy code" data="let a = 15;
unsafe { // we set the boolean to true
      // Now unsafe operations are allowed!
      let b = *(&#x26;a as *const i32);
      let c = std::mem::transmute<i32, f32>(b);
} // we set it to false
// Yay me!!!" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>But in the following case, where we have nested unsafe context, the boolean fails to recognize that we are still "unsafe"; thus needing a stack.</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="diff" data-theme="github-dark-dimmed"><code data-language="diff" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#8DDB8C">+unsafe </span><span style="color:#6cb6ff">{</span><span style="color:#8DDB8C"> // wraps the above unsafe context inside another unsafe context</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">    let a = 15;</span></span>
<span data-line=""><span style="color:#ADBAC7">    unsafe </span><span style="color:#6bc46d">{</span><span style="color:#ADBAC7"> // we set the boolean to true</span></span>
<span data-line=""><span style="color:#ADBAC7">         let b = *</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">&#x26;a as *const i32</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">         let c = std::mem::transmute</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#ADBAC7">i32, f32</span><span style="color:#ADBAC7">></span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">b</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7"> // we set it to false</span></span>
<span data-line=""><span style="color:#ADBAC7">    // Yay me!!!</span></span>
<span data-line=""><span style="color:#8DDB8C">+ </span><span style="color:#6cb6ff">}</span></span>
<span data-line=""><span style="color:#8DDB8C">+ // Now unsafe operations are forbidden again, but the boolean is false</span></span>
<span data-line=""><span style="color:#8DDB8C">+ let f = std::mem::transmute</span><span style="color:#8DDB8C">&#x3C;</span><span style="color:#8DDB8C">i32, f32</span><span style="color:#8DDB8C">></span><span style="color:#6cb6ff">(</span><span style="color:#8DDB8C">15</span><span style="color:#6cb6ff">)</span><span style="color:#8DDB8C">; // Uh-oh!</span></span><button type="button" title="Copy code" aria-label="Copy code" data="+unsafe { // wraps the above unsafe context inside another unsafe context

    let a = 15;
    unsafe { // we set the boolean to true
         let b = *(&#x26;a as *const i32);
         let c = std::mem::transmute<i32, f32>(b);
    } // we set it to false
    // Yay me!!!
+ }
+ // Now unsafe operations are forbidden again, but the boolean is false
+ let f = std::mem::transmute<i32, f32>(15); // Uh-oh!" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Before every visit to an unsafe context, the unsafe checker inserts a context into the stack and after every visit, it pops that context out. A check to see if we are still unsafe checks if the stack is empty.
Readers interested in implementation details can check <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/checks/errors/rust-unsafe-checker.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/checks/errors/rust-unsafe-checker.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/util/rust-stacked-contexts.h</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/util/rust-stacked-contexts.h" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<h3 id="type-checking"><a aria-hidden="true" tabindex="-1" href="#type-checking"><span class="icon icon-link"></span></a>Type checking</h3>
<p>From the rust compiler dev references:</p>
<blockquote>
<p>"The only ones that are of particular interest to rustc are NORETURN which makes asm! return ! instead of ()".</p>
</blockquote>
<p>We minimally represent this situation with the following implementation in <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/typecheck/rust-hir-typecheck-expr.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/typecheck/rust-hir-typecheck-expr.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">void</span></span>
<span data-line=""><span style="color:#F69D50">TypeCheckExpr</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">visit</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsm </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#768390">  // We recursively typechecks its operands.</span></span>
<span data-line=""><span style="color:#DCBDFB">  typecheck_inline_asm_operand</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  if</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr.options.</span><span style="color:#DCBDFB">count</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#F69D50">AST</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">InlineAsmOption</span><span style="color:#ADBAC7">::NORETURN</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">==</span><span style="color:#6CB6FF"> 1</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">    infered </span><span style="color:#F47067">=</span><span style="color:#F47067"> new</span><span style="color:#F69D50"> TyTy</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">NeverType</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr.</span><span style="color:#DCBDFB">get_mappings</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">get_hirid</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  else</span></span>
<span data-line=""><span style="color:#ADBAC7">    infered</span></span>
<span data-line=""><span style="color:#F47067">      =</span><span style="color:#F69D50"> TyTy</span><span style="color:#ADBAC7">::</span><span style="color:#F69D50">TupleType</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">get_unit_type</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr.</span><span style="color:#DCBDFB">get_mappings</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">get_hirid</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="void
TypeCheckExpr::visit (HIR::InlineAsm &#x26;expr)
{
  // We recursively typechecks its operands.
  typecheck_inline_asm_operand (expr);


  if (expr.options.count (AST::InlineAsmOption::NORETURN) == 1)
    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());
  else
    infered
      = TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>I omit the part where we also recursive typecheck and infer each expr in each operand for the next part</p>
<h3 id="resolution"><a aria-hidden="true" tabindex="-1" href="#resolution"><span class="icon icon-link"></span></a>Resolution</h3>
<p>Given an example that is part of <a href="https://github.com/Rust-GCC/gccrs/pull/3060/files#diff-693188f770da1bcaab140cfa09a7df64b510f5b17f21d9dc7627fc401776086a" rel="nofollow" target="_blank">inline_asm_mov_x86_rs</a> test case, where we refers to _x as a potential output:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark-dimmed"><code data-language="rust" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">let</span><span style="color:#F47067"> mut</span><span style="color:#ADBAC7"> _x</span><span style="color:#F47067">:</span><span style="color:#F69D50"> i32</span><span style="color:#F47067"> =</span><span style="color:#6CB6FF"> 0</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">unsafe</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#DCBDFB">    asm!</span><span style="color:#6bc46d">(</span></span>
<span data-line=""><span style="color:#96D0FF">        "mov $5, {}"</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">        out</span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">reg</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> _x</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="let mut _x: i32 = 0;
unsafe {
    asm!(
        &#x22;mov $5, {}&#x22;,
        out(reg) _x
    );
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>We need a way to somehow link the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>_x</span></span><button type="button" title="Copy code" aria-label="Copy code" data="_x" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> that we refers inside the asm!, inside the unsafe block to the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>_x</span></span><button type="button" title="Copy code" aria-label="Copy code" data="_x" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> outside of the unsafe block.</p>
<p>The part that handles this is called name resolution. The <a href="https://rustc-dev-guide.rust-lang.org/name-resolution.html#:~:text=The%20name%20resolution%20in%20Rust,other%20via%20the%20ResolverAstLoweringExt%20trait." rel="nofollow" target="_blank">Rust Compiler Dev Reference</a> goes into much details for this part.</p>
<p>Here I provide some implementation details for gccrs.</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#768390">// Perform type checking on expr. Also runs type unification algorithm.</span></span>
<span data-line=""><span style="color:#768390">// Returns the unified type of expr</span></span>
<span data-line=""><span style="color:#F69D50">TyTy</span><span style="color:#ADBAC7">::BaseType </span><span style="color:#F47067">*</span></span>
<span data-line=""><span style="color:#F69D50">TypeCheckExpr</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">Resolve</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::Expr </span><span style="color:#F47067">*</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#ADBAC7">  TypeCheckExpr resolver;</span></span>
<span data-line=""><span style="color:#ADBAC7">  expr-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">accept_vis</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">resolver</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  if</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">resolver.infered </span><span style="color:#F47067">==</span><span style="color:#6CB6FF"> nullptr</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#F47067">    return</span><span style="color:#F47067"> new</span><span style="color:#F69D50"> TyTy</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">ErrorType</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">get_mappings</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">get_hirid</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> ref </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> expr-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">get_mappings</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">.</span><span style="color:#DCBDFB">get_hirid</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">  resolver.infered-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">set_ref</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ref</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">  resolver.context-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">insert_type</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">get_mappings</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, resolver.infered</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> resolver.infered;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// Perform type checking on expr. Also runs type unification algorithm.
// Returns the unified type of expr
TyTy::BaseType *
TypeCheckExpr::Resolve (HIR::Expr *expr)
{
  TypeCheckExpr resolver;
  expr->accept_vis (resolver);

  if (resolver.infered == nullptr)
    return new TyTy::ErrorType (expr->get_mappings ().get_hirid ());

  auto ref = expr->get_mappings ().get_hirid ();
  resolver.infered->set_ref (ref);
  resolver.context->insert_type (expr->get_mappings (), resolver.infered);

  return resolver.infered;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h2 id="tree-generic"><a aria-hidden="true" tabindex="-1" href="#tree-generic"><span class="icon icon-link"></span></a>TREE (GENERIC)</h2>
<p>After we have finished setting up the AST and the HIR, we'll set up the TREE (GENERIC IR) infrastructure for our asm! node and after that, this IR will be lowered by gcc itself (GIMPLE IR), relieving us from duty.</p>
<p>The most central data structure used in the IR is <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>tree</span></span><button type="button" title="Copy code" aria-label="Copy code" data="tree" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, thus the name. From now, we'll refer to TREE IR as GENERIC IR.</p>
<p>The knowledge I learned about GENERIC is through this documentation <a href="https://gcc.gnu.org/onlinedocs/gccint/GENERIC.html" rel="nofollow" target="_blank">https://gcc.gnu.org/onlinedocs/gccint/GENERIC.html</a></p>
<h3 id="overall"><a aria-hidden="true" tabindex="-1" href="#overall"><span class="icon icon-link"></span></a>Overall</h3>
<p>Let's look at the definition and explore the tree code structures</p>
<p>From the GCC GENERIC:</p>
<blockquote>
<p>The purpose of GENERIC is simply to provide a language-independent way of representing an entire function in trees... If you can express it with the codes in gcc/tree.def, it’s GENERIC.</p>
</blockquote>
<p>Needless to say, we are to obtain a working knowledge of trees and tree codes :)</p>
<p>In the tree.def file, the tree codes are defined with the following structure:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="plaintext" data-theme="github-dark-dimmed"><code data-language="plaintext" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span>DEFTREECODE (name, string_name, class, operand_count)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="DEFTREECODE (name, string_name, class, operand_count)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>where:</p>
<ul>
<li>name: The symbolic name of the tree node.</li>
<li>string_name: The human-readable string representing the node.</li>
<li>class: A classification for the nodes to follow a specific structure/functionality.</li>
<li>operand_count: The number of fields it takes to make the tree of this type.</li>
</ul>
<p>Let's give an example of some of the tree codes we're sure to use:</p>

























<table><thead><tr><th>Tree code definition</th><th>definition location in tree.def</th><th>Usage in our backend</th></tr></thead><tbody><tr><td>DEFTREECOE(TREE_LIST, "tree_list", tcc_exceptional, 0)</td><td>Line 54</td><td>Construction of operands</td></tr><tr><td>DEFTREECODE(STRING_CST, "string_cst", tcc_constant, 0)</td><td>Line 310</td><td>Construction of templated assembly code</td></tr><tr><td>DEFTREECODE(ASM_EXPR, "asm_expr", tcc_statement, 5)</td><td>Line 1008</td><td>Construction of inline assembly node</td></tr></tbody></table>
<h3 id="anatomy"><a aria-hidden="true" tabindex="-1" href="#anatomy"><span class="icon icon-link"></span></a>Anatomy</h3>
<p>I'll give a detailed look of the ones that are needed for the project.</p>
<h4 id="tree_list"><a aria-hidden="true" tabindex="-1" href="#tree_list"><span class="icon icon-link"></span></a>TREE_LIST</h4>
<p>TREE_LIST is ... just a list of trees... It has a TREE_VALUE, TREE_PURPOSE and TREE_CHAIN.</p>
<p>For the first two values, TREE_VALUE holds the element while TREE_PURPOSE gives a directive to later stages on what to do with this TREE_VALUE. In our tree usage section, we'll see that a tree list of register operands contains a TREE_VALUE of variables and a TREE_PURPOSE of register type, denoting if it's input or output register operands.</p>
<p>The TREE_CHAIN node points to the next element in the tree list, which is also a TREE_LIST.</p>
<p>In <a href="https://github.com/Rust-GCC/gccrs/blob/master/gcc/tree.cc" rel="nofollow" target="_blank">gcc/tree.cc</a>, a way to construct a tree list is</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#768390">/* Return a newly created TREE_LIST node whose</span></span>
<span data-line=""><span style="color:#768390">   purpose and value fields are PARM and VALUE.  */</span></span>
<span data-line=""><span style="color:#ADBAC7">tree</span></span>
<span data-line=""><span style="color:#DCBDFB">build_tree_list</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#ADBAC7">tree parm, tree value MEM_STAT_DECL</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#ADBAC7">  tree t </span><span style="color:#F47067">=</span><span style="color:#DCBDFB"> make_node</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">TREE_LIST PASS_MEM_STAT</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">  TREE_PURPOSE</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">t</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> parm;</span></span>
<span data-line=""><span style="color:#DCBDFB">  TREE_VALUE</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">t</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> value;</span></span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> t;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="/* Return a newly created TREE_LIST node whose
   purpose and value fields are PARM and VALUE.  */
tree
build_tree_list (tree parm, tree value MEM_STAT_DECL)
{
  tree t = make_node (TREE_LIST PASS_MEM_STAT);
  TREE_PURPOSE (t) = parm;
  TREE_VALUE (t) = value;
  return t;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>A trend you'll see is that these underlying wrapper methods that construct our trees is that they'll start with a <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>tree t = make node(...)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="tree t = make node(...)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> or something that allocates memory for a tree, and then some  more <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>UPPER_CASE_SETTER_GETTER_METHOD(t) = ...</span></span><button type="button" title="Copy code" aria-label="Copy code" data="UPPER_CASE_SETTER_GETTER_METHOD(t) = ..." class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> that follows.</p>
<h4 id="string_cst"><a aria-hidden="true" tabindex="-1" href="#string_cst"><span class="icon icon-link"></span></a>STRING_CST</h4>
<p>The STRING_CST is a tree constant of string. We'll use this type of TREE in a lot of places. For example, TREE_PURPOSE in the above TREE_LIST often uses some form of STRING_CST as a directive for later stages. We can also use it as a way to encode our unprocessed/templated inline assembly code as STRING_CST.</p>
<p>Sometimes, our strings can also be represented not by a STRING_CST but by ARRAY of type CHAR, and this is also acceptable. An example of this is in <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> for the inline assembly code.</p>
<p>A call to construct STRING_CST: <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>build_string</span></span><button type="button" title="Copy code" aria-label="Copy code" data="build_string" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span>, takes two parameters: a length of cstr, including the NULL delimiter and the cstr itself.</p>
<h4 id="asm_expr"><a aria-hidden="true" tabindex="-1" href="#asm_expr"><span class="icon icon-link"></span></a>ASM_EXPR</h4>
<p>An ASM_EXPR has 5 parameters it needs passing.</p>
<ul>
<li>An ASM_STRING of treecode STRING_CST</li>
<li>An ASM_OUTPUTS of treecode TREE_LIST</li>
<li>An ASM_INPUTS of treecode TREE_LIST</li>
<li>An ASM_CLOBBERS</li>
<li>An ASM_LABELS</li>
</ul>
<p>I omit the last two treecodes simply because the project hasn't had the capacity to explore the clobber and label functionality.</p>
<h3 id="tree-usage"><a aria-hidden="true" tabindex="-1" href="#tree-usage"><span class="icon icon-link"></span></a>TREE USAGE</h3>
<p>In constructing the tree representation of our inline assembly, we combine the existing infrastructure as well as our knowledge of tree codes.</p>
<p>More specifically, we rely on existing tree generation of our variables and raw c strings. We build ourselves a list of input and output registers to make up the ASM_EXPR tree.</p>
<p>The process of building our ASM_EXPR is as follow:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#ADBAC7">tree</span></span>
<span data-line=""><span style="color:#F69D50">CompileAsm</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">tree_codegen_asm</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsm </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">  auto</span><span style="color:#ADBAC7"> asm_expr</span></span>
<span data-line=""><span style="color:#F47067">    =</span><span style="color:#DCBDFB"> asm_build_stmt</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">expr.</span><span style="color:#DCBDFB">get_locus</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">, </span><span style="color:#daaa3f">{</span><span style="color:#DCBDFB">asm_construct_string_tree</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">expr</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">					  asm_construct_outputs</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">expr</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">					  asm_construct_inputs</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">expr</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">					  asm_construct_clobber_tree</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">expr</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">					  asm_construct_label_tree</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">expr</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">}</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#DCBDFB">  ASM_INPUT_P</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">asm_expr</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> expr.</span><span style="color:#DCBDFB">is_simple_asm</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">  ASM_VOLATILE_P</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">asm_expr</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#6CB6FF"> false</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">  ASM_INLINE_P</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">asm_expr</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> expr.</span><span style="color:#DCBDFB">is_inline_asm</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> asm_expr;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">tree</span></span>
<span data-line=""><span style="color:#F69D50">CompileAsm</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">asm_build_stmt</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span></span>
<span data-line=""><span style="color:#6CB6FF">  location_t</span><span style="color:#ADBAC7"> loc,</span></span>
<span data-line=""><span style="color:#F47067">  const</span><span style="color:#F69D50"> std</span><span style="color:#ADBAC7">::array</span><span style="color:#F47067">&#x3C;</span><span style="color:#ADBAC7">tree, </span><span style="color:#F69D50">CompileAsm</span><span style="color:#ADBAC7">::ASM_TREE_ARRAY_LENGTH</span><span style="color:#F47067">></span><span style="color:#F47067"> &#x26;</span><span style="color:#ADBAC7">trees</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#768390">  // Prototype functiion for building an ASM_EXPR tree.</span></span>
<span data-line=""><span style="color:#ADBAC7">  tree ret;</span></span>
<span data-line=""><span style="color:#F47067">  bool</span><span style="color:#ADBAC7"> side_effects;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">  ret </span><span style="color:#F47067">=</span><span style="color:#DCBDFB"> make_node</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ASM_EXPR</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">  TREE_TYPE</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ret</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> void_type_node;</span></span>
<span data-line=""><span style="color:#DCBDFB">  SET_EXPR_LOCATION</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ret, loc</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">  side_effects </span><span style="color:#F47067">=</span><span style="color:#6CB6FF"> false</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">  for</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#F47067">size_t</span><span style="color:#ADBAC7"> i </span><span style="color:#F47067">=</span><span style="color:#6CB6FF"> 0</span><span style="color:#ADBAC7">; i </span><span style="color:#F47067">&#x3C;</span><span style="color:#ADBAC7"> trees.</span><span style="color:#DCBDFB">size</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">; i</span><span style="color:#F47067">++</span><span style="color:#6bc46d">)</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#ADBAC7">      tree t </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> trees</span><span style="color:#daaa3f">[</span><span style="color:#ADBAC7">i</span><span style="color:#daaa3f">]</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">      if</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">t </span><span style="color:#F47067">&#x26;&#x26;</span><span style="color:#F47067"> !</span><span style="color:#DCBDFB">TYPE_P</span><span style="color:#ADBAC7"> </span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">t</span><span style="color:#ff938a">)</span><span style="color:#daaa3f">)</span></span>
<span data-line=""><span style="color:#ADBAC7">	side_effects </span><span style="color:#F47067">|=</span><span style="color:#DCBDFB"> TREE_SIDE_EFFECTS</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">t</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">      TREE_OPERAND</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">ret, i</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> t;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#DCBDFB">  TREE_SIDE_EFFECTS</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ret</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">|=</span><span style="color:#ADBAC7"> side_effects;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">  return</span><span style="color:#ADBAC7"> ret;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="tree
CompileAsm::tree_codegen_asm (HIR::InlineAsm &#x26;expr)
{
  auto asm_expr
    = asm_build_stmt (expr.get_locus (), {asm_construct_string_tree (expr),
					  asm_construct_outputs (expr),
					  asm_construct_inputs (expr),
					  asm_construct_clobber_tree (expr),
					  asm_construct_label_tree (expr)});

  ASM_INPUT_P (asm_expr) = expr.is_simple_asm ();
  ASM_VOLATILE_P (asm_expr) = false;
  ASM_INLINE_P (asm_expr) = expr.is_inline_asm ();

  return asm_expr;
}

tree
CompileAsm::asm_build_stmt (
  location_t loc,
  const std::array<tree, CompileAsm::ASM_TREE_ARRAY_LENGTH> &#x26;trees)
{
  // Prototype functiion for building an ASM_EXPR tree.
  tree ret;
  bool side_effects;

  ret = make_node (ASM_EXPR);
  TREE_TYPE (ret) = void_type_node;
  SET_EXPR_LOCATION (ret, loc);


  side_effects = false;
  for (size_t i = 0; i < trees.size (); i++)
    {
      tree t = trees[i];
      if (t &#x26;&#x26; !TYPE_P (t))
	side_effects |= TREE_SIDE_EFFECTS (t);
      TREE_OPERAND (ret, i) = t;
    }

  TREE_SIDE_EFFECTS (ret) |= side_effects;

  return ret;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>In the end, we add the tree to a list of statements in the following fashion:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="cpp" data-theme="github-dark-dimmed"><code data-language="cpp" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#F47067">void</span></span>
<span data-line=""><span style="color:#F69D50">CompileExpr</span><span style="color:#ADBAC7">::</span><span style="color:#DCBDFB">visit</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">(</span><span style="color:#F69D50">HIR</span><span style="color:#ADBAC7">::InlineAsm </span><span style="color:#F47067">&#x26;</span><span style="color:#ADBAC7">expr</span><span style="color:#6cb6ff">)</span></span>
<span data-line=""><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#ADBAC7">  CompileAsm </span><span style="color:#DCBDFB">asm_codegen</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">ctx</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">  ctx-</span><span style="color:#ADBAC7">></span><span style="color:#DCBDFB">add_statement</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">asm_codegen.</span><span style="color:#DCBDFB">tree_codegen_asm</span><span style="color:#ADBAC7"> </span><span style="color:#daaa3f">(</span><span style="color:#ADBAC7">expr</span><span style="color:#daaa3f">)</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="void
CompileExpr::visit (HIR::InlineAsm &#x26;expr)
{
  CompileAsm asm_codegen (ctx);
  ctx->add_statement (asm_codegen.tree_codegen_asm (expr));

}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Readers interested in the implementation details can refer to
<span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/backend/rust-compile-asm.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/backend/rust-compile-asm.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark-dimmed"><span data-line=""><span>gcc/rust/backend/rust-compile-expr.h/cc</span></span><button type="button" title="Copy code" aria-label="Copy code" data="gcc/rust/backend/rust-compile-expr.h/cc" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></span></p>
<h2 id="results"><a aria-hidden="true" tabindex="-1" href="#results"><span class="icon icon-link"></span></a>Results</h2>
<p>Yayyy, we've finally relieved ourselves of code generation responsibilities, leaving the rest to GIMPLE, RTL, and gcc backend. The gccrs compiler can now generate correct instructions using the in and out register operands.</p>
<p>Below shows a few test cases that gccrs can now pass:</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="rust" data-theme="github-dark-dimmed"><code data-language="rust" data-theme="github-dark-dimmed" style="display: grid;"><span data-line=""><span style="color:#768390">/* { dg-do run { target arm*-*-* } } */</span></span>
<span data-line=""><span style="color:#768390">/* { dg-output "5\r*\n9\r*\n" }*/</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ADBAC7">#!</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">feature</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">rustc_attrs</span><span style="color:#6bc46d">)</span><span style="color:#6cb6ff">]</span></span>
<span data-line=""><span style="color:#ADBAC7">#</span><span style="color:#6cb6ff">[</span><span style="color:#ADBAC7">rustc_builtin_macro</span><span style="color:#6cb6ff">]</span></span>
<span data-line=""><span style="color:#DCBDFB">macro_rules!</span><span style="color:#DCBDFB"> asm</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">(</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">=</span><span style="color:#F47067">></span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">extern</span><span style="color:#96D0FF"> "C"</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">    fn</span><span style="color:#DCBDFB"> printf</span><span style="color:#6bc46d">(</span><span style="color:#ADBAC7">s</span><span style="color:#F47067">:</span><span style="color:#F47067"> *const</span><span style="color:#F69D50"> i8</span><span style="color:#ADBAC7">, </span><span style="color:#F47067">...</span><span style="color:#6bc46d">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> main</span><span style="color:#6cb6ff">(</span><span style="color:#6cb6ff">)</span><span style="color:#ADBAC7"> </span><span style="color:#F47067">-</span><span style="color:#F47067">></span><span style="color:#F69D50"> i32</span><span style="color:#ADBAC7"> </span><span style="color:#6cb6ff">{</span></span>
<span data-line=""><span style="color:#F47067">    let</span><span style="color:#F47067"> mut</span><span style="color:#ADBAC7"> x</span><span style="color:#F47067">:</span><span style="color:#F69D50"> i32</span><span style="color:#F47067"> =</span><span style="color:#6CB6FF"> 0</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#F47067">    let</span><span style="color:#F47067"> mut</span><span style="color:#ADBAC7"> _y</span><span style="color:#F47067">:</span><span style="color:#F69D50"> i32</span><span style="color:#F47067"> =</span><span style="color:#6CB6FF"> 9</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    unsafe</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#DCBDFB">        asm!</span><span style="color:#daaa3f">(</span></span>
<span data-line=""><span style="color:#96D0FF">            "mov {}, 5"</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">            out</span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">reg</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> x</span></span>
<span data-line=""><span style="color:#ADBAC7">        </span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">        printf</span><span style="color:#daaa3f">(</span><span style="color:#96D0FF">"%d</span><span style="color:#F47067">\n\0</span><span style="color:#96D0FF">"</span><span style="color:#F47067"> as</span><span style="color:#F47067"> *const</span><span style="color:#F69D50"> str</span><span style="color:#F47067"> as</span><span style="color:#F47067"> *const</span><span style="color:#F69D50"> i8</span><span style="color:#ADBAC7">, x</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F47067">    unsafe</span><span style="color:#ADBAC7"> </span><span style="color:#6bc46d">{</span></span>
<span data-line=""><span style="color:#DCBDFB">        asm!</span><span style="color:#daaa3f">(</span></span>
<span data-line=""><span style="color:#96D0FF">            "mov {}, {}"</span><span style="color:#ADBAC7">,</span></span>
<span data-line=""><span style="color:#DCBDFB">            in</span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">reg</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> _y,</span></span>
<span data-line=""><span style="color:#DCBDFB">            out</span><span style="color:#ff938a">(</span><span style="color:#ADBAC7">reg</span><span style="color:#ff938a">)</span><span style="color:#ADBAC7"> x</span></span>
<span data-line=""><span style="color:#ADBAC7">        </span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#DCBDFB">        printf</span><span style="color:#daaa3f">(</span><span style="color:#96D0FF">"%d</span><span style="color:#F47067">\n\0</span><span style="color:#96D0FF">"</span><span style="color:#F47067"> as</span><span style="color:#F47067"> *const</span><span style="color:#F69D50"> str</span><span style="color:#F47067"> as</span><span style="color:#F47067"> *const</span><span style="color:#F69D50"> i8</span><span style="color:#ADBAC7">, x</span><span style="color:#daaa3f">)</span><span style="color:#ADBAC7">;</span></span>
<span data-line=""><span style="color:#ADBAC7">    </span><span style="color:#6bc46d">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6CB6FF">    0</span></span>
<span data-line=""><span style="color:#6cb6ff">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="/* { dg-do run { target arm*-*-* } } */
/* { dg-output &#x22;5\r*\n9\r*\n&#x22; }*/

#![feature(rustc_attrs)]
#[rustc_builtin_macro]
macro_rules! asm {
    () => {};
}

extern &#x22;C&#x22; {
    fn printf(s: *const i8, ...);
}

fn main() -> i32 {
    let mut x: i32 = 0;
    let mut _y: i32 = 9;

    unsafe {
        asm!(
            &#x22;mov {}, 5&#x22;,
            out(reg) x
        );
        printf(&#x22;%d\n\0&#x22; as *const str as *const i8, x);
    };

    unsafe {
        asm!(
            &#x22;mov {}, {}&#x22;,
            in(reg) _y,
            out(reg) x
        );
        printf(&#x22;%d\n\0&#x22; as *const str as *const i8, x);
    }

    0
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<h2 id="end-words"><a aria-hidden="true" tabindex="-1" href="#end-words"><span class="icon icon-link"></span></a>End words</h2>
<p>Participating in Google Summer of Code for gccrs  (and get paid for it hehe) has been my most gratifying and meaningful experience in software development. I am mentored by Arthur Cohen and Pierre-Emmanuel "PEP" Patry; Arthur helped me with the direction of the project and code reviews while Pierre-Emmanuel provided me with code infrastructure navigation and PR code-reviews, both of which are much needed.</p>
<p>The main struggles for me in this internship is three fold:</p>
<ul>
<li>Around designing the code infrastructure to support inline assembly.</li>
<li>Around constructing new AST/HIR/ Tree IR via inheritance.</li>
<li>In general, navigating around documentation and codebase.</li>
</ul>
<p>There wasn't much in terms of inline assembly related work before the summer of my internship in gccrs. This means that I need also to decide how to
create and structure my code in a way that fits into the codebase itself. At that moment, there was just this fear of not knowing what to do, not knowing what to code.
That's the thing I love about software engineering in general and compiler more specifically.
The concept is akin to create something out of thin air: you made up a class and named it AST, inherited this class from another AST and trust that the visitor
pattern will come to save you once you have also created your made-up parser to produce this made-up AST; and the pattern continues on.
Looking back, I think given the time, I should have done more. Put in more PRs and contribute more test cases; sadly, I’ve let my indecisiveness and fear of the unknown consume me.</p>
<p>Documentation, I've learned, is a some-what of dire thing in the compiler world. I'm now, in retrospect, extra grateful for Arthur when he wrote
up a whole docs detailing each step for me when I attempted a hard PR. Thank you Arthur moah moah moah I love you.</p>
<p>I am taking a graduate course in compiler right now (Compiler optimization) (beaten to a pulp) and will try to get into another graduate compiler class next semester (Implementation of PL) and work in the industry in 2025.</p>
<p>Thank you for reading :)</p>6:["$","div",null,{"className":"py-12 flex flex-col items-center  justify-items-start mx-auto ","children":[["$","$L2",null,{"href":"/blog","className":"flex justify-center text-4xl","children":["$","h2",null,{"children":"My blog"}]}],["$","article",null,{"className":"p-8 prose pt-0.5 max-w-none w-full lg:w-1/2 md:w-4/6 sm:w-5/6 prose-sky mx-auto","children":[["$","div",null,{"className":"flex justify-center text-2xl font-bold ","children":["$","h2",null,{"children":"What I did for GSoc 2024"}]}],["$","div",null,{"className":"flex justify-start text-xl font-bold underline","children":["$","h4",null,{"children":"2024-08-22"}]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}]]}]
a:{"metadata":[["$","title","0",{"children":"What I did for GSoc 2024"}],["$","meta","1",{"name":"description","content":"The article is a report of what Jasmine's done for her Google Summer Of Code"}],["$","link","2",{"rel":"icon","href":"/_next/static/media/pfp6.723cdd8c.png"}],["$","$L12","3",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
